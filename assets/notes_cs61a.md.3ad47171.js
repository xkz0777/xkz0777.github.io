import{_ as s,c as n,o as a,U as e}from"./chunks/framework.97e4ff17.js";const l="/images/cs61a/python_frame.png",A=JSON.parse('{"title":"CS61A Notes","description":"","frontmatter":{"title":"CS61A Notes","outline":[2,3,4]},"headers":[],"relativePath":"notes/cs61a.md","lastUpdated":1680788888000}'),o={name:"notes/cs61a.md"},p=e(`<h1 id="cs61a-notes" tabindex="-1">CS61A Notes <a class="header-anchor" href="#cs61a-notes" aria-label="Permalink to &quot;CS61A Notes&quot;">​</a></h1><p>This is my notes for <a href="https://inst.eecs.berkeley.edu/~cs61a/su20/" target="_blank" rel="noreferrer">CS61A su20</a>.</p><p>Writeups for Homeworks and Labs are available <a href="https://github.com/xkz0777/CS61A-su20-writeups" target="_blank" rel="noreferrer">here</a>.</p><h2 id="docstring" tabindex="-1">Docstring <a class="header-anchor" href="#docstring" aria-label="Permalink to &quot;Docstring&quot;">​</a></h2><p>A docstring is a string literal that occurs as the first statement in a module, function, class, or method definition. Such a docstring becomes the <code>__doc__</code> attribute of that object.</p><ul><li>The docstring line should begin with a capital letter and end with a period.</li><li>The first line should be a short description (summary).</li><li>If there are more lines in the documentation string, <strong>the second line should be blank, visually separating the summary from the rest of the description.</strong></li><li>The following lines should be one or more paragraphs describing the object’s calling conventions, its side effects, etc.</li></ul><p>There is a plugin called <code>Python Docstring Generator</code> that can generate docstring templates.</p><h2 id="command-line-options" tabindex="-1">Command Line Options <a class="header-anchor" href="#command-line-options" aria-label="Permalink to &quot;Command Line Options&quot;">​</a></h2><p><code>-i</code>: The <code>-i</code> option runs your Python script, then opens an interactive session. In an interactive session, you run Python code line by line and get immediate feedback instead of running an entire file all at once.</p><p><code>-m doctest &lt;filename&gt;</code>: Runs doctests <strong>in a particular file</strong>. Doctests are surrounded by triple quotes (<code>&quot;&quot;&quot;</code>) within functions. <code>-v</code> shows the details.</p><h2 id="about-ok" tabindex="-1">About ok <a class="header-anchor" href="#about-ok" aria-label="Permalink to &quot;About ok&quot;">​</a></h2><p>In 61A, we use a program called Ok for autograding labs, homeworks, and projects.</p><p><code>python3 ok -q &lt;function&gt;</code> is a way to test a single function in this course. We can add <code>-i</code> option to open an interactive terminal to investigate a failing test for question.</p><p>The best way to look at an environment diagram to investigate a failing test for question is to add <code>--trace</code> option</p><p>To prevent the ok autograder from interpreting print statements as output, print with &#39;DEBUG:&#39; at the front of the outputted line.</p><h2 id="expressions-and-statements-in-python" tabindex="-1">Expressions and Statements in Python <a class="header-anchor" href="#expressions-and-statements-in-python" aria-label="Permalink to &quot;Expressions and Statements in Python&quot;">​</a></h2><p>A sequence of <strong>operands and operators</strong>, like <code>a + b - 5</code>, is called an expression. Expression will be evaluated by the Python interpreter.</p><h3 id="primitive-expressions" tabindex="-1">Primitive expressions <a class="header-anchor" href="#primitive-expressions" aria-label="Permalink to &quot;Primitive expressions&quot;">​</a></h3><p>A primitive expression requires only a single evaluation step. Literals, such as numbers and strings, evaluate to themselves. Names require a single lookup step.</p><h3 id="arithmetic-expressions" tabindex="-1">Arithmetic expressions <a class="header-anchor" href="#arithmetic-expressions" aria-label="Permalink to &quot;Arithmetic expressions&quot;">​</a></h3><p>Arithmetic expressions in Python are very similar to ones we’ve seen in other math contexts.</p><h3 id="assignment-statements" tabindex="-1">Assignment statements <a class="header-anchor" href="#assignment-statements" aria-label="Permalink to &quot;Assignment statements&quot;">​</a></h3><p>An assignment statement assigns a certain value to a variable name.</p><p>To execute an assignment statement:</p><ol><li>Evaluate the expression on the right-hand-side of the statement to obtain a value.</li><li>Write the variable name and the expression’s value in the current frame.</li></ol><h3 id="logical-expression" tabindex="-1">Logical Expression <a class="header-anchor" href="#logical-expression" aria-label="Permalink to &quot;Logical Expression&quot;">​</a></h3><p>In Python, only <code>False</code>, <code>0</code>, <code>&#39;&#39;</code>, <code>None</code> are considered as <code>False</code> in Python. Anything else is considered to be <code>True</code>.</p><p>Python includes the boolean operators <code>and</code>, <code>or</code>, and <code>not</code>. These operatorsare used to combine and manipulate boolean values.</p><p><code>and</code> evaluates expressions in order and <strong>stops evaluating (short-circuits) once it reaches the first false value, and then returns it.</strong> If all values evaluate to a true value, the last value is returned.</p><p><code>or</code> short-circuits at the first true value and returns it. If all values evaluate toa false value, the last value is returned.</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#56B6C2;">&gt;&gt;&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;font-style:italic;">and</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span></span>
<span class="line"><span style="color:#D19A66;">3</span></span>
<span class="line"><span style="color:#56B6C2;">&gt;&gt;&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;font-style:italic;">or</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">999</span></span>
<span class="line"><span style="color:#D19A66;">0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="def-statements" tabindex="-1">def Statements <a class="header-anchor" href="#def-statements" aria-label="Permalink to &quot;def Statements&quot;">​</a></h3><p>def statements <strong>create function objects and bind them to a name</strong>. To diagram def statements, record the function name and bind the function object to the name. It’s also important to write the <strong>parent frame of the function,</strong> which is <strong>where the function is defined.</strong></p><h3 id="call-expressions" tabindex="-1">Call expressions <a class="header-anchor" href="#call-expressions" aria-label="Permalink to &quot;Call expressions&quot;">​</a></h3><p>Call expressions, such as <code>square(2)</code>, apply functions to arguments. When executing call expressions, we <strong>create a new frame</strong> in our diagram to keep track of local variables:</p><ol><li><p>Evaluate the <strong>operator</strong>, which should <strong>evaluate to a function</strong>.</p></li><li><p>Evaluate the operands <strong>from left to right</strong>. (Unlike assignment statement)</p></li><li><p>Draw a new frame, labelling it with the following:</p><ul><li><p>A unique index (f1, f2, f3, ...)</p></li><li><p>The intrinsic name of the function, which is the name of the function object itself. For example, if the function object is func square(x) [parent=Global], the intrinsic name is square.</p></li><li><p>The parent frame ([parent=Global])</p></li></ul></li><li><p>Bind the formal parameters to the argument values obtained in step 2 (e.g. bind x to 3).</p></li><li><p>Evaluate the body of the function in this new frame until a return value is obtained. Write down the return value in the frame.</p></li></ol><p>If a function does not have a return value, it <strong>implicitly returns None</strong>. In that case, the &quot;Return value&quot; box should contain None.</p><h3 id="lambda-expressions" tabindex="-1">Lambda expressions <a class="header-anchor" href="#lambda-expressions" aria-label="Permalink to &quot;Lambda expressions&quot;">​</a></h3><p>A lambda expression <strong>evaluates to a function</strong>, called a lambda function. For example, <code>lambda y: x + y</code> is a lambda expression, and can be read as a function that takes in one parameter <code>y</code> and returns <code>x + y</code>. A lambda expression by itself evaluates to a function but <strong>does not bind it to a name</strong>. Also note that the return expression of this function is not evaluated until the lambda is called. This is similar to how defining a new function using a def statement does not execute the function’s body until it is later called.</p><h2 id="higher-order-function" tabindex="-1">Higher Order Function <a class="header-anchor" href="#higher-order-function" aria-label="Permalink to &quot;Higher Order Function&quot;">​</a></h2><p>Higher-order-function is a function that takes in another function as argument or returns a function. We can implement a general function like this:</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">improve</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">update</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">close</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">guess</span><span style="color:#ABB2BF;">=</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">while</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;font-style:italic;">not</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">(guess):</span></span>
<span class="line"><span style="color:#ABB2BF;">        guess </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">update</span><span style="color:#ABB2BF;">(guess)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> guess</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>This <code>improve</code> function is a general expression of <strong>repetitive refinement</strong>. It doesn&#39;t specify what problem is being solved: those details are left to the <code>update</code> and <code>close</code> functions passed in as arguments.</p><p>We can use this function to compute the golden ratio. The golden ratio, often called &quot;phi&quot;, can be computed by repeatedly summing the inverse of any positive number with 1, and that it is one less than its square.</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">approx_eq</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">y</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">tolerance</span><span style="color:#ABB2BF;">=</span><span style="color:#D19A66;">1e-15</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">abs</span><span style="color:#ABB2BF;">(x </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> y) </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> tolerance</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">golden_close</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">guess</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">approx_eq</span><span style="color:#ABB2BF;">(guess </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> guess, guess </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">golden_update</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">guess</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#98C379;">    </span><span style="color:#C678DD;font-style:italic;">&gt;&gt;&gt; </span><span style="color:#98C379;">improve(golden_update, golden_close)</span></span>
<span class="line"><span style="color:#98C379;">    1.6180339887498951</span></span>
<span class="line"><span style="color:#98C379;">    &#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;">guess </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>Newton&#39;s method:</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">newton_update</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">f</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">df</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">lambda</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">x</span><span style="color:#ABB2BF;">: x </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">f</span><span style="color:#ABB2BF;">(x) </span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">df</span><span style="color:#ABB2BF;">(x)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">find_zero</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">f</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">df</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    near_zero </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">lambda</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">approx_eq</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">f</span><span style="color:#ABB2BF;">(x), </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">improve</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">newton_update</span><span style="color:#ABB2BF;">(f, df), near_zero)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>The reason why we define the function <code>near_zero</code> inside <code>find_zero</code> is to make it compatible with improve. Because the <code>close</code> argument is supposed to take in only one argument.</p><p>Now we can calculate the nth root:</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">nth_root</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">n</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">a</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#98C379;">    </span><span style="color:#C678DD;font-style:italic;">&gt;&gt;&gt; </span><span style="color:#98C379;">nth_root(3, 8)</span></span>
<span class="line"><span style="color:#98C379;">    2.0</span></span>
<span class="line"><span style="color:#98C379;">    &#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    f </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">lambda</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#56B6C2;">pow</span><span style="color:#ABB2BF;">(x, n)</span></span>
<span class="line"><span style="color:#ABB2BF;">    df </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">lambda</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">x</span><span style="color:#ABB2BF;">: n </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">pow</span><span style="color:#ABB2BF;">(x, n </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">find_zero</span><span style="color:#ABB2BF;">(f, df)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>One important application of HOFs is converting a function that takes multiple arguments into a chain of functions that each take a single argument. This is known as <code>currying</code>. For example, the function below converts the pow function into its curried form:</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">curried_pow</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">x</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">h</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">y</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">pow</span><span style="color:#ABB2BF;">(x, y)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> h</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="self-reference" tabindex="-1">Self Reference <a class="header-anchor" href="#self-reference" aria-label="Permalink to &quot;Self Reference&quot;">​</a></h2><p>An interesting consequence of the way environment work is that a function can refer to its own name within its body. For example:</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">print_sum</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">x</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(x)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">add_next</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">y</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">print_sum</span><span style="color:#ABB2BF;">(x </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> y)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> add_next</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Every time function <code>print_sum</code> being called, it will return <code>add_next</code>, in which x memorizes the previous sum. When <code>add_next</code> is looking for the value of x, it will look up to its parent frame, which is a feature of closure.</p><h2 id="closure" tabindex="-1">Closure <a class="header-anchor" href="#closure" aria-label="Permalink to &quot;Closure&quot;">​</a></h2><p>In programming languages, a closure, also lexical closure(词法闭包) or function closure(函数闭包), is a technique for implementing lexically scoped name binding in a language with <strong>first-class functions</strong>. Operationally, a closure is a record <strong>storing a function together with an environment</strong>. The environment is a mapping <strong>associating each free variable of the function (variables that are used locally, but defined in an enclosing scope)</strong> with the value or reference to which the name was bound when the closure was created. Unlike a plain function, a closure allows the function to access those captured variables <strong>through the closure&#39;s copies of their values or references</strong>, even when the function is invoked outside their scope.</p><h2 id="difference-between-eval-and-exec" tabindex="-1">Difference between <code>eval</code> and <code>exec</code> <a class="header-anchor" href="#difference-between-eval-and-exec" aria-label="Permalink to &quot;Difference between \`eval\` and \`exec\`&quot;">​</a></h2><p><code>eval</code> accepts <strong>only a single expression</strong>, <code>exec</code> <strong>can take a code block</strong> that has Python statements: loops, try: except:, class and function/method definitions and so on.</p><p><strong>An expression in Python is whatever you can have as the value in a variable assignment</strong>:</p><p><code>a_variable = (anything you can put within these parentheses is an expression)</code></p><p><code>eval</code> <strong>returns the value of the given expression</strong>, whereas <code>exec</code> ignores the return value from its code, and <strong>always returns None</strong>.</p><h2 id="recursion" tabindex="-1">Recursion <a class="header-anchor" href="#recursion" aria-label="Permalink to &quot;Recursion&quot;">​</a></h2><p>An interesting example from the lecture:</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">cascade</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">n</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(n)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> n </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">cascade</span><span style="color:#ABB2BF;">(n</span><span style="color:#56B6C2;">//</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(n)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">inverse_cascade</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">n</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">grow</span><span style="color:#ABB2BF;">(n)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(n)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">shrink</span><span style="color:#ABB2BF;">(n)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">f_then_g</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">f</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">g</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">n</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> n:</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">f</span><span style="color:#ABB2BF;">(n)</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">g</span><span style="color:#ABB2BF;">(n)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">grow </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">lambda</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">n</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">f_then_g</span><span style="color:#ABB2BF;">(grow, </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">, n </span><span style="color:#56B6C2;">//</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">shrink </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">lambda</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">n</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">f_then_g</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">, shrink, n </span><span style="color:#56B6C2;">//</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>When using recursion, we should avoid redundancy. For example, in hw04, function <code>min_depth</code> is defined as follow:</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">min_depth</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">t</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&quot;&quot;&quot;A simple function to return the distance between t&#39;s root and its closest leaf&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">is_leaf</span><span style="color:#ABB2BF;">(t):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;"># Base case---the distance between a node and itself is zero</span></span>
<span class="line"><span style="color:#ABB2BF;">    h </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">float</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;inf&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;"># Python&#39;s version of infinity</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> b </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">branches</span><span style="color:#ABB2BF;">(t):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">is_leaf</span><span style="color:#ABB2BF;">(b): </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;"># !!!</span></span>
<span class="line"><span style="color:#ABB2BF;">        h </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">min</span><span style="color:#ABB2BF;">(h, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">min_depth</span><span style="color:#ABB2BF;">(b))</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> h</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>It still works without the line flagged with <code>!!!</code>, so we&#39;d better remove this line to eliminate redundancy.</p><p>The example above is called arms-length recursion. Arms-length recursion is not only redundant but often complicates our code and obscures the functionality of recursive functions, making writing recursive functions much more difficult. We always want our recursive case to be handling one and only one recursive level. We may or may not be checking your code periodically for things like this.</p><h3 id="tree-recursion" tabindex="-1">Tree Recursion <a class="header-anchor" href="#tree-recursion" aria-label="Permalink to &quot;Tree Recursion&quot;">​</a></h3><p>Tree recursion appears whenever executing the body of a recursive function makes more than one recursive call. Tree recursion can be very time-consuming for it can be highly repetitive. Memoization is an extremely useful technique for speeding up the running time.</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">memo</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">f</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    cached </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">memoized</span><span style="color:#ABB2BF;">(*</span><span style="color:#D19A66;font-style:italic;">args</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> args </span><span style="color:#C678DD;font-style:italic;">not</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> cache:</span></span>
<span class="line"><span style="color:#ABB2BF;">        	cache[args] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">f</span><span style="color:#ABB2BF;">(*args)</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> cache[args]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> memoized</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>The special syntax <code>*args</code> in function definitions is used to pass a variable number of arguments to a function. <code>**kwargs</code> has a similar effect. Look at the following examples to see how they differ.</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(*</span><span style="color:#D19A66;font-style:italic;">args</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#98C379;">    Add the arguments and return the summation</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">    Returns:</span></span>
<span class="line"><span style="color:#98C379;">        Summation of arguments</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">    </span><span style="color:#C678DD;font-style:italic;">&gt;&gt;&gt; </span><span style="color:#98C379;">add(1, 2, 3)</span></span>
<span class="line"><span style="color:#98C379;">    Data type of argument: &lt;class &#39;tuple&#39;&gt;</span></span>
<span class="line"><span style="color:#98C379;">    6</span></span>
<span class="line"><span style="color:#98C379;">    &#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Data type of argument:&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">type</span><span style="color:#ABB2BF;">(args))</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">sum</span><span style="color:#ABB2BF;">(args)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">intro</span><span style="color:#ABB2BF;">(**</span><span style="color:#D19A66;font-style:italic;">kwargs</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#98C379;">    Print out introduction of a person</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">    </span><span style="color:#C678DD;font-style:italic;">&gt;&gt;&gt; </span><span style="color:#98C379;">intro(Firstname=&quot;Charles&quot;, Lastname=&quot;Wood&quot;, Age=22, Phone=&quot;+861008611&quot;)</span></span>
<span class="line"><span style="color:#98C379;">    Data type of argument: &lt;class &#39;dict&#39;&gt;</span></span>
<span class="line"><span style="color:#98C379;">    Firstname is Charles</span></span>
<span class="line"><span style="color:#98C379;">    Lastname is Wood</span></span>
<span class="line"><span style="color:#98C379;">    Age is 22</span></span>
<span class="line"><span style="color:#98C379;">    Phone is +861008611</span></span>
<span class="line"><span style="color:#98C379;">    &#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Data type of argument:&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">type</span><span style="color:#ABB2BF;">(kwargs))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> key, value </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> kwargs.</span><span style="color:#61AFEF;">items</span><span style="color:#ABB2BF;">():</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;</span><span style="color:#D19A66;">{}</span><span style="color:#98C379;"> is </span><span style="color:#D19A66;">{}</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">format</span><span style="color:#ABB2BF;">(key, value))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>The parameter name does not have to be args or kwargs.</p><h2 id="list" tabindex="-1">List <a class="header-anchor" href="#list" aria-label="Permalink to &quot;List&quot;">​</a></h2><h3 id="sequence-unpacking" tabindex="-1">Sequence Unpacking <a class="header-anchor" href="#sequence-unpacking" aria-label="Permalink to &quot;Sequence Unpacking&quot;">​</a></h3><p>We have a nested list <code>pair</code>:</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">pairs </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">], [</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">]]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>we can do:</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> x, y </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> pairs:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#D19A66;">...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="list-comprehension" tabindex="-1">List Comprehension <a class="header-anchor" href="#list-comprehension" aria-label="Permalink to &quot;List Comprehension&quot;">​</a></h3><p>Syntax:</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">&lt;map</span><span style="color:#ABB2BF;"> exp</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;">name</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&lt;iter</span><span style="color:#ABB2BF;"> exp</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&lt;filter</span><span style="color:#ABB2BF;"> exp</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Pay attention to the square brackets!</p><h3 id="slicing" tabindex="-1">Slicing <a class="header-anchor" href="#slicing" aria-label="Permalink to &quot;Slicing&quot;">​</a></h3><p>Slicing will create a new list, so when we need to copy a list <code>lst</code>, we can use <code>lst[:]</code> or <code>list(lst)</code>.</p><p>When the slicing index is out of bound of list, it won&#39;t cause any trouble. Instead we&#39;ll get an empty list. (Unlike element selection, which will throw an IndexError)</p><h3 id="zip" tabindex="-1">Zip <a class="header-anchor" href="#zip" aria-label="Permalink to &quot;Zip&quot;">​</a></h3><p>The <code>zip()</code> function returns a <strong>zip object</strong>, which is an iterator of tuples where the first item in each passed iterator is paired together, and then the second item in each passed iterator are paired together etc.</p><p>If the passed iterators have different lengths, the iterator <strong>with the least items decides the length</strong> of the new iterator.</p><h2 id="debugging" tabindex="-1">Debugging <a class="header-anchor" href="#debugging" aria-label="Permalink to &quot;Debugging&quot;">​</a></h2><h3 id="assersion" tabindex="-1">assersion <a class="header-anchor" href="#assersion" aria-label="Permalink to &quot;assersion&quot;">​</a></h3><p>Use assersion when you know a good invariant, which check that code meets an existing understanding.</p><p>Syntax: <code>assert &lt;exp&gt;, &#39;Something goes wrong&#39;</code></p><h3 id="doctest-print-debugging-and-interactive-debugging" tabindex="-1">Doctest, Print debugging and Interactive debugging <a class="header-anchor" href="#doctest-print-debugging-and-interactive-debugging" aria-label="Permalink to &quot;Doctest, Print debugging and Interactive debugging&quot;">​</a></h3><p>Introduced before.</p><h3 id="error-types" tabindex="-1">Error Types <a class="header-anchor" href="#error-types" aria-label="Permalink to &quot;Error Types&quot;">​</a></h3><ul><li><p>SyntaxError</p></li><li><p>IndentationError</p></li><li><p>TypeError</p><p>xxx object is not callable: accidentally called a non-function as if it were a function.</p><p>NoneType: forgot return statement in a function</p></li><li><p>NameError or UnboundLocalError</p><p>A typo in the name in the description</p><p>Or Maybe shadowed a variable from the global frame in a local frame:</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">f</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">x</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> x </span><span style="color:#56B6C2;">**</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">g</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">x</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">	y </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">f</span><span style="color:#ABB2BF;">(x)</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">f</span><span style="color:#ABB2BF;">():</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> y </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> x</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> f</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ul><h3 id="tracebacks" tabindex="-1">Tracebacks <a class="header-anchor" href="#tracebacks" aria-label="Permalink to &quot;Tracebacks&quot;">​</a></h3><p>Components:</p><ol><li>The error message itself</li><li>Lines #s on the way to the error</li><li>What’s on those lines</li></ol><p>Most recent call is at the bottom. Look at each line, bottom to top and see which one might be causing the error.</p><h2 id="trees" tabindex="-1">Trees <a class="header-anchor" href="#trees" aria-label="Permalink to &quot;Trees&quot;">​</a></h2><h3 id="abstraction" tabindex="-1">Abstraction <a class="header-anchor" href="#abstraction" aria-label="Permalink to &quot;Abstraction&quot;">​</a></h3><h4 id="recursive-description-wooden-trees" tabindex="-1">Recursive description (wooden trees) <a class="header-anchor" href="#recursive-description-wooden-trees" aria-label="Permalink to &quot;Recursive description (wooden trees)&quot;">​</a></h4><ul><li>A tree has a root and a list of branches.</li><li>Each branch is a tree.</li><li>A tree with zero branches is called a leaf.</li></ul><h4 id="relative-description-family-trees" tabindex="-1">Relative description (family trees) <a class="header-anchor" href="#relative-description-family-trees" aria-label="Permalink to &quot;Relative description (family trees)&quot;">​</a></h4><ul><li>Each location in a tree is called a node.</li><li>Each node has a label value.</li><li>One node can be the parent/child of another.</li></ul><h3 id="implementation" tabindex="-1">Implementation <a class="header-anchor" href="#implementation" aria-label="Permalink to &quot;Implementation&quot;">​</a></h3><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">tree</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">label</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">branches</span><span style="color:#ABB2BF;">=[]):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#98C379;">	</span><span style="color:#C678DD;font-style:italic;">&gt;&gt;&gt; </span><span style="color:#98C379;">tree(3, [tree(1), tree(2, [tree(1), tree(1)])])</span></span>
<span class="line"><span style="color:#98C379;">	[3, [1], [2, [1], [1]]]</span></span>
<span class="line"><span style="color:#98C379;">    &#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> branch </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> branches:</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;font-style:italic;">assert</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">is_tree</span><span style="color:#ABB2BF;">(branch)</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> [label] </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">list</span><span style="color:#ABB2BF;">(branches)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">label</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">tree</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> tree[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">branches</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">tree</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> tree[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">:]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">is_tree</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">tree</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">type</span><span style="color:#ABB2BF;">(tree) </span><span style="color:#56B6C2;">!=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">list</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;font-style:italic;">or</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">len</span><span style="color:#ABB2BF;">(tree) </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">False</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> branch </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">branches</span><span style="color:#ABB2BF;">(tree):</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;font-style:italic;">not</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">is_tree</span><span style="color:#ABB2BF;">(branch):</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">False</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">is_leaf</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">tree</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;font-style:italic;">not</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">branches</span><span style="color:#ABB2BF;">(tree)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h3 id="tree-processing" tabindex="-1">Tree Processing <a class="header-anchor" href="#tree-processing" aria-label="Permalink to &quot;Tree Processing&quot;">​</a></h3><p>We often use recursion to process a tree. Processing a leaf is often the base case of a tree processing function. The recursive case typically makes a recursive call on each branch, then aggregates.</p><p>Several built-in functions take iterable arguments and aggregate them into a value.</p><ul><li><p><code>sum(iterable[, start]) -&gt; value</code></p><p>start has default value 0. Note that iterable doesn&#39;t have to be iterators. Lists and tuples are also iterable.</p></li><li><p><code>max(iterable[, key=func]) -&gt; value</code></p></li><li><p><code>max(a, b, c, ...[, key=func]) -&gt; value</code></p><p>With a single iterable argument, return its largest item.</p><p>With two or more arguments, return the largest argument.</p></li><li><p><code>all(iterable) -&gt; bool</code></p><p>Return True if bool(x) is True for all values x in the iterable. If the iterable is empty, return True.</p><p><code>min</code>, <code>any(iterable) -&gt; bool</code> has similar function.</p></li></ul><p>For example:</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">count_leaves</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">t</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#98C379;">&#39;&#39;&#39;Count the leaves of a tree.&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">is_leaf</span><span style="color:#ABB2BF;">(t):</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;font-style:italic;">else</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">sum</span><span style="color:#ABB2BF;">([</span><span style="color:#61AFEF;">count_leaves</span><span style="color:#ABB2BF;">(b) </span><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> b </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">branches</span><span style="color:#ABB2BF;">(t)])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>A function that creates a tree from another tree is typically also recursive</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">increment_leaves</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">t</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">&#39;&#39;&#39;Return a tree like t but with leaf values incremented.&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">is_leaf</span><span style="color:#ABB2BF;">(t):</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">tree</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">label</span><span style="color:#ABB2BF;">(t) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;font-style:italic;">else</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">		bs </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#61AFEF;">increment_leaves</span><span style="color:#ABB2BF;">(b) </span><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> b </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">branches</span><span style="color:#ABB2BF;">(t)]</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">tree</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">label</span><span style="color:#ABB2BF;">(t), bs)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">increment</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">t</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#98C379;">&#39;&#39;&#39;Return a tree like t but with all node values incremented.&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">tree</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">label</span><span style="color:#ABB2BF;">(t) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, [</span><span style="color:#61AFEF;">increment</span><span style="color:#ABB2BF;">(b) </span><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> b </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">branches</span><span style="color:#ABB2BF;">(t)])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>increment</code> doesn&#39;t have a base case, but it still works because when <code>t</code> is a leaf, <code>branches(t)</code> will be an empty list (slicing index out of range) and the recursion will stop automatically.</p><h2 id="mutation" tabindex="-1">Mutation <a class="header-anchor" href="#mutation" aria-label="Permalink to &quot;Mutation&quot;">​</a></h2><h3 id="tuples" tabindex="-1">Tuples <a class="header-anchor" href="#tuples" aria-label="Permalink to &quot;Tuples&quot;">​</a></h3><p>Tuples are Immutable Sequences, Immutable values are protected from mutation.</p><p>An immutable sequence may still change if it contains a mutable value as an element. For example:</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">s </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> ([</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">], </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">s[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;"># Error</span></span>
<span class="line"><span style="color:#ABB2BF;">s[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">][</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;"># Ok</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="sameness-and-change" tabindex="-1">Sameness and Change <a class="header-anchor" href="#sameness-and-change" aria-label="Permalink to &quot;Sameness and Change&quot;">​</a></h3><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">a </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">b </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">a </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> b  </span><span style="color:#7F848E;font-style:italic;"># True (Equality, a and b evaluates to equal values)</span></span>
<span class="line"><span style="color:#ABB2BF;">a </span><span style="color:#C678DD;font-style:italic;">is</span><span style="color:#ABB2BF;"> b  </span><span style="color:#7F848E;font-style:italic;"># False</span></span>
<span class="line"><span style="color:#ABB2BF;">a </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> b</span></span>
<span class="line"><span style="color:#ABB2BF;">a </span><span style="color:#C678DD;font-style:italic;">is</span><span style="color:#ABB2BF;"> b  </span><span style="color:#7F848E;font-style:italic;"># True (Identity, a and b evaluates to the same object)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="mutable-default-arguments-are-dangerous" tabindex="-1">Mutable Default Arguments are Dangerous <a class="header-anchor" href="#mutable-default-arguments-are-dangerous" aria-label="Permalink to &quot;Mutable Default Arguments are Dangerous&quot;">​</a></h3><p>A default argument value is part of a function value, not generated by a call:</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">f</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">s</span><span style="color:#ABB2BF;">=[]):</span></span>
<span class="line"><span style="color:#ABB2BF;">	s.</span><span style="color:#61AFEF;">append</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">len</span><span style="color:#ABB2BF;">(s)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">f</span><span style="color:#ABB2BF;">()  </span><span style="color:#7F848E;font-style:italic;"># 1</span></span>
<span class="line"><span style="color:#61AFEF;">f</span><span style="color:#ABB2BF;">()  </span><span style="color:#7F848E;font-style:italic;"># 2</span></span>
<span class="line"><span style="color:#61AFEF;">f</span><span style="color:#ABB2BF;">()  </span><span style="color:#7F848E;font-style:italic;"># 3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><img src="`+l+`" style="zoom:50%;"><h3 id="nonlocal-statements" tabindex="-1">Nonlocal Statements <a class="header-anchor" href="#nonlocal-statements" aria-label="Permalink to &quot;Nonlocal Statements&quot;">​</a></h3><p>Syntax: <code>nonlocal &lt;name&gt;</code></p><p>Effect: Future assignments to that name change its pre-existing binding in the first non-local frame of the current environment in which that name is bound.</p><p>Names listed in a nonlocal statement <strong>must refer to pre-existing bindings in an enclosing scope.</strong></p><p>Names listed in a nonlocal statement <strong>must not collide with pre-existing bindings in the local scope.</strong></p><p><strong>Mutable values can be changed without a nonlocal statement.</strong></p><h2 id="iterators-and-generators" tabindex="-1">Iterators and Generators <a class="header-anchor" href="#iterators-and-generators" aria-label="Permalink to &quot;Iterators and Generators&quot;">​</a></h2><h3 id="iterators" tabindex="-1">Iterators <a class="header-anchor" href="#iterators" aria-label="Permalink to &quot;Iterators&quot;">​</a></h3><p>A container can provide an iterator that provides access to its elements in order.</p><p><code>iter(iterable)</code>: Return an iterator over the elements of an iterable value.</p><p><code>next(iterator):</code> Return the next element in an iterator. Once an iterator has returned all the values in an iterable, subsequent calls to next on that iterable will result in a <code>StopIteration</code> exception.</p><h4 id="views-of-a-dictionary" tabindex="-1">Views of a Dictionary <a class="header-anchor" href="#views-of-a-dictionary" aria-label="Permalink to &quot;Views of a Dictionary&quot;">​</a></h4><p>A dictionary, its keys, its values, and its items are all iterable values.</p><p>An <strong>iterable value</strong> is any value that <strong>can be passed to iter</strong> to produce an iterator.</p><p>An iterator is returned from iter and can be passed to next; all iterators are mutable.</p><p><strong>The order of items in a dictionary is the order in which they were added</strong> (Python 3.6+)</p><p>Historically, items appeared in an arbitrary order (Python 3.5 and earlier).</p><p>An dictionary object has methods <code>keys</code>, <code>values</code> and <code>items</code>. We can use them to iterate through a dictionary.</p><h4 id="built-in-functions-for-iteration" tabindex="-1">Built-in Functions for Iteration <a class="header-anchor" href="#built-in-functions-for-iteration" aria-label="Permalink to &quot;Built-in Functions for Iteration&quot;">​</a></h4><p>Many built-in Python sequence operations return iterators that <strong>compute results lazily</strong>.</p><ul><li><code>map(func, iterable)</code>: Iterate over func(x) for x in iterable</li><li><code>filter(func, iterable)</code>: Iterate over x in iterable if func(x)</li><li><code>zip(first_iter, second_iter)</code>: Iterate over co-indexed (x, y) pairs</li><li><code>reversed(sequence)</code>: Iterate over x in a sequence in reverse order</li></ul><p>To view the contents of an iterator, place the resulting elements into a container:</p><ul><li>list(iterable): Create a list containing all x in iterable</li><li>tuple(iterable): Create a tuple containing all x in iterable</li><li>sorted(iterable): Create a sorted list containing x in iterable</li></ul><h3 id="generators" tabindex="-1">Generators <a class="header-anchor" href="#generators" aria-label="Permalink to &quot;Generators&quot;">​</a></h3><p>A <strong>generator function</strong> is a function that <strong>yields values instead of returning them</strong>.</p><p>A normal function returns once; a generator function can yield multiple times.</p><p>When a generator function is called, it <strong>returns a generator object which is a type of iterator.</strong> This generator object iterates over its yields.</p><p>A <code>yield from</code> statement yields all values from an iterator or iterable.</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">a_then_b</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">b</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> x </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> a:</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;font-style:italic;">yield</span><span style="color:#ABB2BF;"> x</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> x </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> b:</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;font-style:italic;">yield</span><span style="color:#ABB2BF;"> x</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># Using yield from</span></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">a_then_b</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">b</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;font-style:italic;">yield from</span><span style="color:#ABB2BF;"> a</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;font-style:italic;">yield from</span><span style="color:#ABB2BF;"> b</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><code>yield from</code> also makes generators recursively yileds from itself like the recursion in normal functions:</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">countdown</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">k</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> k </span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;font-style:italic;">yield</span><span style="color:#ABB2BF;"> k</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;font-style:italic;">yield from</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">countdown</span><span style="color:#ABB2BF;">(k</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="objects" tabindex="-1">Objects <a class="header-anchor" href="#objects" aria-label="Permalink to &quot;Objects&quot;">​</a></h2><h3 id="class-statements" tabindex="-1">Class Statements <a class="header-anchor" href="#class-statements" aria-label="Permalink to &quot;Class Statements&quot;">​</a></h3><p>When a class is called:</p><p>1.A new instance of that class is created:</p><p>2.The <code>__init__</code> method of the class is called <strong>with the new object as its first argument (named self)</strong>, along with any additional arguments provided in the call expression.</p><h3 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h3><p>Methods are functions defined in the suite of a class statement. These def statements create function objects as always, but <strong>their names are bound as attributes of the class</strong>.</p><p>Every methods are defined with at least one arguments: self. Dot notation automatically supplies the first argument to a method.</p><h3 id="attributes" tabindex="-1">Attributes <a class="header-anchor" href="#attributes" aria-label="Permalink to &quot;Attributes&quot;">​</a></h3><p>Using <code>getattr</code>, we can look up an attribute using a string</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#56B6C2;">getattr</span><span style="color:#ABB2BF;">(tom_account, </span><span style="color:#98C379;">&#39;balance&#39;</span><span style="color:#ABB2BF;">)  </span><span style="color:#7F848E;font-style:italic;"># 10</span></span>
<span class="line"><span style="color:#56B6C2;">hasattr</span><span style="color:#ABB2BF;">(tom_account, </span><span style="color:#98C379;">&#39;deposit&#39;</span><span style="color:#ABB2BF;">)  </span><span style="color:#7F848E;font-style:italic;"># True</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>getattr</code> and dot expressions look up a name <strong>in the same way</strong>.</p><p>Class attributes are &quot;shared&quot; across all instances of a class because they are attributes of the class, not the instance.</p><p>Instance attributes are set in <code>__init__</code> method.</p><h3 id="inheritance" tabindex="-1">Inheritance <a class="header-anchor" href="#inheritance" aria-label="Permalink to &quot;Inheritance&quot;">​</a></h3><p>Syntax:</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;">Name</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;">Base Class</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;">suite</span><span style="color:#56B6C2;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Conceptually, the new subclass inherits attributes of its base class.</p><p>The subclass may override certain inherited attributes.</p><p>Using inheritance, we implement a subclass by specifying its differences from the the base class.</p><h3 id="looking-up-attribute-names-on-classes" tabindex="-1">Looking Up Attribute Names on Classes <a class="header-anchor" href="#looking-up-attribute-names-on-classes" aria-label="Permalink to &quot;Looking Up Attribute Names on Classes&quot;">​</a></h3><p>To look up a name in a class:</p><ol><li>If it names an attribute in the class, return the attribute value.</li><li>Otherwise, look up the name in the base class, if there is one.</li></ol><p>Note that <strong>base class attributes aren&#39;t copied into subclasses!</strong></p><h3 id="inheritance-and-composition" tabindex="-1">Inheritance and Composition <a class="header-anchor" href="#inheritance-and-composition" aria-label="Permalink to &quot;Inheritance and Composition&quot;">​</a></h3><p>Inheritance is best for representing &quot;<strong>is-a</strong>&quot; relationships.</p><p>E.g., a checking account is a specific type of account. So, CheckingAccount inherits from Account.</p><p>Composition is best for representing &quot;<strong>has-a</strong>&quot; relationships.</p><p>E.g., a bank has a collection of bank accounts it manages. So, A bank has a list of accounts as an attribute.</p><h2 id="linked-list" tabindex="-1">Linked List <a class="header-anchor" href="#linked-list" aria-label="Permalink to &quot;Linked List&quot;">​</a></h2><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Link</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    empty </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> ()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">__init__</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">first</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">rest</span><span style="color:#ABB2BF;">=empty):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">assert</span><span style="color:#ABB2BF;"> rest </span><span style="color:#C678DD;font-style:italic;">is</span><span style="color:#ABB2BF;"> Link.empty </span><span style="color:#C678DD;font-style:italic;">or</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">isinstance</span><span style="color:#ABB2BF;">(rest, Link)</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.first </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> first</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.rest </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> rest</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="property-methods" tabindex="-1">Property Methods <a class="header-anchor" href="#property-methods" aria-label="Permalink to &quot;Property Methods&quot;">​</a></h3><p>In some cases, we want the value of instance attributes to be computed on demand.</p><p>For example, if we want to access the second element of a linked list like this:</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">s </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Link</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">Link</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">Link</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)))</span></span>
<span class="line"><span style="color:#ABB2BF;">s.second  </span><span style="color:#7F848E;font-style:italic;"># Suppose to get 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">s.second </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;"># Can be modified by assignment</span></span>
<span class="line"><span style="color:#ABB2BF;">s  </span><span style="color:#7F848E;font-style:italic;"># 1, 6, 3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Of course we can add a second attribute to <code>Link</code> class, but the second element is stored in the linked list itself, so the best way is to make it behave like a function.</p><p>The <code>@property</code> decorator on a method designates that it will be called whenever it is looked up on an instance. A <code>&lt;attribute&gt;.setter</code> decorator on a method designates that it will be called whenever that attribute is assigned.</p><p><code>&lt;attribute&gt;</code> <strong>must be an existing property method.</strong></p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">@</span><span style="color:#56B6C2;">property</span></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">second</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.rest.first</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">@second</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setter</span></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">second</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">value</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.rest.first </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> value</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>These two functions will be called implicitly.</p><h2 id="interface" tabindex="-1">Interface <a class="header-anchor" href="#interface" aria-label="Permalink to &quot;Interface&quot;">​</a></h2><h3 id="string-representations" tabindex="-1">String Representations <a class="header-anchor" href="#string-representations" aria-label="Permalink to &quot;String Representations&quot;">​</a></h3><p>An object value should behave like the kind of data it is meant to represent.</p><p>In Python, all objects produce two string representations:</p><ul><li>The <code>str</code> is legible to humans</li><li>The <code>repr</code> is legible to the Python interpreter</li></ul><p>The <code>str</code> and <code>repr</code> strings are often the same, but not always.</p><p>The <code>repr</code> function returns a Python expression (a string) that evaluates to an equal object. For most object types, <code>eval(repr(object)) == object</code>.</p><p>Some objects do not have a simple Python-readable string:</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#56B6C2;">&gt;&gt;&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">repr</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">min</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#98C379;">&#39;&lt;built-in function min&gt;&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>The result of calling <code>str</code> on the value of an expression <strong>is what Python prints using the <code>print</code> function.</strong></p><h3 id="polymorphic-functions" tabindex="-1">Polymorphic Functions <a class="header-anchor" href="#polymorphic-functions" aria-label="Permalink to &quot;Polymorphic Functions&quot;">​</a></h3><p>Polymorphic function: A function that applies to many (poly) different forms (morph) of data.</p><p><code>str</code> and <code>repr</code> are both polymorphic; they apply to any object.</p><p><code>repr</code> invokes a zero-argument method <code>__repr__</code> on its argument</p><p><code>str</code> invokes a zero-argument method <code>__str__</code> on its argument</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">__repr__</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.rest </span><span style="color:#C678DD;font-style:italic;">is</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;font-style:italic;">not</span><span style="color:#ABB2BF;"> Link.empty:</span></span>
<span class="line"><span style="color:#ABB2BF;">        rest_repr </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;, &#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">repr</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.rest)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">else</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">        rest_repr </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;Link(&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">repr</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.first) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> rest_repr </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;)&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">__str__</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    string </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;&lt;&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">while</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.rest </span><span style="color:#C678DD;font-style:italic;">is</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;font-style:italic;">not</span><span style="color:#ABB2BF;"> Link.empty:</span></span>
<span class="line"><span style="color:#ABB2BF;">        string </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">str</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.first) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39; &#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.rest</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> string </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">str</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.first) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;&gt;&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><code>repr</code> and <code>str</code> can be implemented like this:</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">repr</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">x</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">type</span><span style="color:#ABB2BF;">(x).</span><span style="color:#56B6C2;">__repr__</span><span style="color:#ABB2BF;">(x)  </span><span style="color:#7F848E;font-style:italic;"># An instance attribute called __repr__ is ignored! Only class attributes are found</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">str</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">x</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    t </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">type</span><span style="color:#ABB2BF;">(x)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">hasattr</span><span style="color:#ABB2BF;">(t, </span><span style="color:#98C379;">&#39;__str__&#39;</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> t.</span><span style="color:#56B6C2;">__str__</span><span style="color:#ABB2BF;">(x)  </span><span style="color:#7F848E;font-style:italic;"># An instance attribute called __str__ is ignored</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">else</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">repr</span><span style="color:#ABB2BF;">(x)  </span><span style="color:#7F848E;font-style:italic;"># If no __str__ attribute is found, uses repr string</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="interfaces" tabindex="-1">Interfaces <a class="header-anchor" href="#interfaces" aria-label="Permalink to &quot;Interfaces&quot;">​</a></h3><p>Message passing: Objects interact by looking up attributes on each other (passing messages)。</p><p>The attribute look-up rules <strong>allow different data types to respond to the same message</strong>.</p><p>A shared message (attribute name) that elicits similar behavior from different object.</p><p>Certain names are special because they have built-in behavior. These names <strong>always start and end with two underscores.</strong></p><p>For example: <code>__add__</code> method is invoked to add one object to another.</p><p>Adding instances of user-defined classes invokes either the <code>__add__</code> or <code>__radd__</code> method.</p><p>A polymorphic function might take two or more arguments of different types.</p><p>Type Dispatching: Inspect the type of an argument in order to select behavior.</p><p>Type Coercion: Convert one value to match the type of another.</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Ratio</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&quot;&quot;&quot;A mutable ratio.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">    </span><span style="color:#C678DD;font-style:italic;">&gt;&gt;&gt; </span><span style="color:#98C379;">f = Ratio(9, 15)</span></span>
<span class="line"><span style="color:#98C379;">    </span><span style="color:#C678DD;font-style:italic;">&gt;&gt;&gt; </span><span style="color:#98C379;">f</span></span>
<span class="line"><span style="color:#98C379;">    Ratio(9, 15)</span></span>
<span class="line"><span style="color:#98C379;">    </span><span style="color:#C678DD;font-style:italic;">&gt;&gt;&gt; </span><span style="color:#98C379;">print(f)</span></span>
<span class="line"><span style="color:#98C379;">    9/15</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">    </span><span style="color:#C678DD;font-style:italic;">&gt;&gt;&gt; </span><span style="color:#98C379;">Ratio(1, 3) + Ratio(1, 6)</span></span>
<span class="line"><span style="color:#98C379;">    Ratio(1, 2)</span></span>
<span class="line"><span style="color:#98C379;">    </span><span style="color:#C678DD;font-style:italic;">&gt;&gt;&gt; </span><span style="color:#98C379;">f + 1</span></span>
<span class="line"><span style="color:#98C379;">    Ratio(8, 5)</span></span>
<span class="line"><span style="color:#98C379;">    </span><span style="color:#C678DD;font-style:italic;">&gt;&gt;&gt; </span><span style="color:#98C379;">1 + f</span></span>
<span class="line"><span style="color:#98C379;">    Ratio(8, 5)</span></span>
<span class="line"><span style="color:#98C379;">    </span><span style="color:#C678DD;font-style:italic;">&gt;&gt;&gt; </span><span style="color:#98C379;">1.4 + f</span></span>
<span class="line"><span style="color:#98C379;">    2.0</span></span>
<span class="line"><span style="color:#98C379;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">__init__</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">n</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">d</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.numer </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> n</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.denom </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> d</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">__repr__</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">f</span><span style="color:#98C379;">&#39;Ratio(</span><span style="color:#D19A66;">{</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.numer</span><span style="color:#D19A66;">}</span><span style="color:#98C379;">, </span><span style="color:#D19A66;">{</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.denom</span><span style="color:#D19A66;">}</span><span style="color:#98C379;">)&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">__str__</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">f</span><span style="color:#98C379;">&#39;</span><span style="color:#D19A66;">{</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.numer</span><span style="color:#D19A66;">}</span><span style="color:#98C379;">/</span><span style="color:#D19A66;">{</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.denom</span><span style="color:#D19A66;">}</span><span style="color:#98C379;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">__add__</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">other</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">isinstance</span><span style="color:#ABB2BF;">(other, </span><span style="color:#56B6C2;">int</span><span style="color:#ABB2BF;">):  </span><span style="color:#7F848E;font-style:italic;"># type dispatching</span></span>
<span class="line"><span style="color:#ABB2BF;">            n </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.numer </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.denom</span></span>
<span class="line"><span style="color:#ABB2BF;">            d </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.denom</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">elif</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">isinstance</span><span style="color:#ABB2BF;">(other, Ratio):</span></span>
<span class="line"><span style="color:#ABB2BF;">            n </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.numer </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> other.denom </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.denom </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> other.numer</span></span>
<span class="line"><span style="color:#ABB2BF;">            d </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.denom </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> other.denom</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">elif</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">isinstance</span><span style="color:#ABB2BF;">(other, </span><span style="color:#56B6C2;">float</span><span style="color:#ABB2BF;">):  </span><span style="color:#7F848E;font-style:italic;"># type coersion</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">float</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> other</span></span>
<span class="line"><span style="color:#ABB2BF;">        g </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">gcd</span><span style="color:#ABB2BF;">(n, d)</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Ratio</span><span style="color:#ABB2BF;">(n </span><span style="color:#56B6C2;">//</span><span style="color:#ABB2BF;"> g, d </span><span style="color:#56B6C2;">//</span><span style="color:#ABB2BF;"> g)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">__radd__</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">__add__</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">__float__</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.numer </span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.denom</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><h2 id="tree-class" tabindex="-1">Tree class <a class="header-anchor" href="#tree-class" aria-label="Permalink to &quot;Tree class&quot;">​</a></h2><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Tree</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">__init__</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">label</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">branches</span><span style="color:#ABB2BF;">=[]):</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.label </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> label</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> branch </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> branches:</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#C678DD;font-style:italic;">assert</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">isinstance</span><span style="color:#ABB2BF;">(branch, Tree)</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.branches </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">list</span><span style="color:#ABB2BF;">(branches)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fib_tree</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">n</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> n </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;font-style:italic;">or</span><span style="color:#ABB2BF;"> n </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Tree</span><span style="color:#ABB2BF;">(n)</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#C678DD;font-style:italic;">else</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">		left </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fib_tree</span><span style="color:#ABB2BF;">(n</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		right </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fib_tree</span><span style="color:#ABB2BF;">(n</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		fib_n </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> left.label </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> right.label</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Tree</span><span style="color:#ABB2BF;">(fib_n, [left, right])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="modular-design" tabindex="-1">Modular design <a class="header-anchor" href="#modular-design" aria-label="Permalink to &quot;Modular design&quot;">​</a></h2><p>A great example: restaurant search engine.</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> json</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">search</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">query</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">ranking</span><span style="color:#ABB2BF;">=</span><span style="color:#C678DD;">lambda</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">r</span><span style="color:#ABB2BF;">: </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;">r.stars):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&quot;&quot;&quot;A restaurant search engine.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">    </span><span style="color:#C678DD;font-style:italic;">&gt;&gt;&gt; </span><span style="color:#98C379;">results = search(&quot;Thai&quot;)</span></span>
<span class="line"><span style="color:#98C379;">    </span><span style="color:#C678DD;font-style:italic;">&gt;&gt;&gt; </span><span style="color:#98C379;">results</span></span>
<span class="line"><span style="color:#98C379;">    [&lt;Thai Basil Cuisine&gt;, &lt;Thai Noodle II&gt;, &lt;Jasmine Thai&gt;, &lt;Berkeley Thai House&gt;, &lt;Viengvilay Thai Cuisine&gt;]</span></span>
<span class="line"><span style="color:#98C379;">    </span><span style="color:#C678DD;font-style:italic;">&gt;&gt;&gt; </span><span style="color:#98C379;">for r in results:</span></span>
<span class="line"><span style="color:#98C379;">    </span><span style="color:#C678DD;font-style:italic;">... </span><span style="color:#98C379;">    print(r.name, &#39;shares reviewers with&#39;, r.similar(3))</span></span>
<span class="line"><span style="color:#98C379;">    Thai Basil Cuisine shares reviewers with [&lt;Gypsy&#39;s Trattoria Italiano&gt;, &lt;Top Dog&gt;, &lt;Smart Alec&#39;s Intelligent Food&gt;]</span></span>
<span class="line"><span style="color:#98C379;">    Thai Noodle II shares reviewers with [&lt;La Cascada Taqueria&gt;, &lt;Cafe Milano&gt;, &lt;Chinese Express&gt;]</span></span>
<span class="line"><span style="color:#98C379;">    Jasmine Thai shares reviewers with [&lt;Hummingbird Cafe&gt;, &lt;La Burrita 2&gt;, &lt;The Stuffed Inn&gt;]</span></span>
<span class="line"><span style="color:#98C379;">    Berkeley Thai House shares reviewers with [&lt;Smart Alec&#39;s Intelligent Food&gt;, &lt;Thai Basil Cuisine&gt;, &lt;Top Dog&gt;]</span></span>
<span class="line"><span style="color:#98C379;">    Viengvilay Thai Cuisine shares reviewers with [&lt;La Val&#39;s Pizza&gt;, &lt;Thai Basil Cuisine&gt;, &lt;La Burrita 2&gt;]</span></span>
<span class="line"><span style="color:#98C379;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    results </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [r </span><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> r </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> Restaurant.all </span><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> query </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> r.name]</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">sorted</span><span style="color:#ABB2BF;">(results, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">ranking)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">num_shared_reviewers</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">restaurant</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">other</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fast_overlap</span><span style="color:#ABB2BF;">(restaurant.reviewers, other.reviewers)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;"># return len([r for r in restaurant.reviewers if r in other.reviewers])</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fast_overlap</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">s</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">t</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&quot;&quot;&quot;Return the overlap between sorted S and sorted T.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">    </span><span style="color:#C678DD;font-style:italic;">&gt;&gt;&gt; </span><span style="color:#98C379;">fast_overlap([2, 3, 5, 6, 7], [1, 4, 5, 6, 7, 8])</span></span>
<span class="line"><span style="color:#98C379;">    3</span></span>
<span class="line"><span style="color:#98C379;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    count, i, j </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">while</span><span style="color:#ABB2BF;"> i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">len</span><span style="color:#ABB2BF;">(s) </span><span style="color:#C678DD;font-style:italic;">and</span><span style="color:#ABB2BF;"> j </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">len</span><span style="color:#ABB2BF;">(t):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> s[i] </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> t[j]:</span></span>
<span class="line"><span style="color:#ABB2BF;">            count, i, j </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> count </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, i </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, j </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">elif</span><span style="color:#ABB2BF;"> s[i] </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> t[j]:</span></span>
<span class="line"><span style="color:#ABB2BF;">            i </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">else</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">            j </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> count</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Restaurant</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&quot;&quot;&quot;A restaurant.&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">all</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">__init__</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">stars</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">reviewers</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.name </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> name</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.stars </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> stars</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.reviewers </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> reviewers</span></span>
<span class="line"><span style="color:#ABB2BF;">        Restaurant.all.</span><span style="color:#61AFEF;">append</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">similar</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">k</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">similarity</span><span style="color:#ABB2BF;">=num_shared_reviewers):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&quot;Return the K most similar restaurants to SELF, using SIMILARITY for comparison.&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">        others </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">list</span><span style="color:#ABB2BF;">(Restaurant.all)</span></span>
<span class="line"><span style="color:#ABB2BF;">        others.</span><span style="color:#61AFEF;">remove</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">sorted</span><span style="color:#ABB2BF;">(others, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">lambda</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">r</span><span style="color:#ABB2BF;">: </span><span style="color:#56B6C2;">-</span><span style="color:#61AFEF;">similarity</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">, r))[:k]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">__repr__</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">self</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;&lt;&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.name </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;&gt;&#39;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">load_reviews</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">reviews_file</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    reviewers_by_restaurant </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> line </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">open</span><span style="color:#ABB2BF;">(reviews_file):</span></span>
<span class="line"><span style="color:#ABB2BF;">        r </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> json.</span><span style="color:#61AFEF;">loads</span><span style="color:#ABB2BF;">(line)</span></span>
<span class="line"><span style="color:#ABB2BF;">        business_id </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> r[</span><span style="color:#98C379;">&#39;business_id&#39;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> business_id </span><span style="color:#C678DD;font-style:italic;">not</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> reviewers_by_restaurant:</span></span>
<span class="line"><span style="color:#ABB2BF;">            reviewers_by_restaurant[business_id] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> []</span></span>
<span class="line"><span style="color:#ABB2BF;">        reviewers_by_restaurant[business_id].</span><span style="color:#61AFEF;">append</span><span style="color:#ABB2BF;">(r[</span><span style="color:#98C379;">&#39;user_id&#39;</span><span style="color:#ABB2BF;">])</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">return</span><span style="color:#ABB2BF;"> reviewers_by_restaurant</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">load_restaurants</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">reviewers_by_restaurant</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">restaurants_file</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> line </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">open</span><span style="color:#ABB2BF;">(restaurants_file):</span></span>
<span class="line"><span style="color:#ABB2BF;">        b </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> json.</span><span style="color:#61AFEF;">loads</span><span style="color:#ABB2BF;">(line)</span></span>
<span class="line"><span style="color:#ABB2BF;">        reviewers </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> reviewers_by_restaurant.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(b[</span><span style="color:#98C379;">&#39;business_id&#39;</span><span style="color:#ABB2BF;">], [])</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">Restaurant</span><span style="color:#ABB2BF;">(b[</span><span style="color:#98C379;">&#39;name&#39;</span><span style="color:#ABB2BF;">], b[</span><span style="color:#98C379;">&#39;stars&#39;</span><span style="color:#ABB2BF;">], </span><span style="color:#56B6C2;">sorted</span><span style="color:#ABB2BF;">(reviewers))</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">load_restaurants</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">load_reviews</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;reviews.json&#39;</span><span style="color:#ABB2BF;">), </span><span style="color:#98C379;">&#39;restaurants.json&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">while</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">True</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;&gt;&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">end</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39; &#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    results </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">search</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">input</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">strip</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> r </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> results:</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(r.name, </span><span style="color:#98C379;">&#39;shares reviewers with&#39;</span><span style="color:#ABB2BF;">, r.</span><span style="color:#61AFEF;">similar</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br></div></div><h2 id="sets" tabindex="-1">Sets <a class="header-anchor" href="#sets" aria-label="Permalink to &quot;Sets&quot;">​</a></h2><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#56B6C2;">&gt;&gt;&gt;</span><span style="color:#ABB2BF;"> s </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span><span style="color:#98C379;">&#39;one&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;two&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;three&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;four&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;four&#39;</span><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#56B6C2;">&gt;&gt;&gt;</span><span style="color:#ABB2BF;"> s</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span><span style="color:#98C379;">&#39;three&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;one&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;four&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;two&#39;</span><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#56B6C2;">&gt;&gt;&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;three&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> s</span></span>
<span class="line"><span style="color:#D19A66;">True</span></span>
<span class="line"><span style="color:#56B6C2;">&gt;&gt;&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">len</span><span style="color:#ABB2BF;">(s)</span></span>
<span class="line"><span style="color:#D19A66;">4</span></span>
<span class="line"><span style="color:#56B6C2;">&gt;&gt;&gt;</span><span style="color:#ABB2BF;"> s.</span><span style="color:#61AFEF;">union</span><span style="color:#ABB2BF;">({</span><span style="color:#98C379;">&#39;one&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;five&#39;</span><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span><span style="color:#98C379;">&#39;three&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;five&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;one&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;four&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;two&#39;</span><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#56B6C2;">&gt;&gt;&gt;</span><span style="color:#ABB2BF;"> s.</span><span style="color:#61AFEF;">intersection</span><span style="color:#ABB2BF;">({</span><span style="color:#98C379;">&#39;six&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;five&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;four&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;three&#39;</span><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span><span style="color:#98C379;">&#39;three&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;four&#39;</span><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#56B6C2;">&gt;&gt;&gt;</span><span style="color:#ABB2BF;"> s</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span><span style="color:#98C379;">&#39;three&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;one&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;four&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;two&#39;</span><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#D19A66;">13</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="scheme" tabindex="-1">Scheme <a class="header-anchor" href="#scheme" aria-label="Permalink to &quot;Scheme&quot;">​</a></h2><h3 id="expressions" tabindex="-1">Expressions <a class="header-anchor" href="#expressions" aria-label="Permalink to &quot;Expressions&quot;">​</a></h3><h4 id="atomic-expressions" tabindex="-1">Atomic Expressions <a class="header-anchor" href="#atomic-expressions" aria-label="Permalink to &quot;Atomic Expressions&quot;">​</a></h4><p>Just like in Python, atomic, or primitive, expressions in Scheme take a single step to evaluate. These include numbers, booleans, symbols.</p><div class="language-scheme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">scheme</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">scm&gt; 1234    </span><span style="color:#7F848E;font-style:italic;">; integer</span></span>
<span class="line"><span style="color:#ABB2BF;">1234</span></span>
<span class="line"><span style="color:#ABB2BF;">scm&gt; 123.4   </span><span style="color:#7F848E;font-style:italic;">; real number</span></span>
<span class="line"><span style="color:#ABB2BF;">123.4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h5 id="symbols" tabindex="-1">Symbols <a class="header-anchor" href="#symbols" aria-label="Permalink to &quot;Symbols&quot;">​</a></h5><p>Out of these, the symbol type is the only one we didn&#39;t encounter in Python. A symbol acts a lot like a Python name, but not exactly. Specifically, a symbol in Scheme is also a type of value. On the other hand, in Python, names only serve as expressions; a Python expression can never evaluate to a name.</p><div class="language-scheme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">scheme</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">scm&gt; </span><span style="color:#56B6C2;">quotient</span><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">; A name bound to a built-in procedure</span></span>
<span class="line"><span style="color:#ABB2BF;">#</span><span style="color:#FFFFFF;">[</span><span style="color:#ABB2BF;">quotient</span><span style="color:#FFFFFF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">scm&gt; </span><span style="color:#56B6C2;">&#39;quotient</span><span style="color:#ABB2BF;">     </span><span style="color:#7F848E;font-style:italic;">; An expression that evaluates to a symbol</span></span>
<span class="line"><span style="color:#ABB2BF;">quotient</span></span>
<span class="line"><span style="color:#ABB2BF;">scm&gt; </span><span style="color:#56B6C2;">&#39;hello-world!</span></span>
<span class="line"><span style="color:#ABB2BF;">hello-world!</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h5 id="booleans" tabindex="-1">Booleans <a class="header-anchor" href="#booleans" aria-label="Permalink to &quot;Booleans&quot;">​</a></h5><p>In Scheme, all values except the special boolean value <code>#f</code> are interpreted as true values (unlike Python, where there are some false-y values like <code>0</code>). Our particular version of the Scheme interpreter allows you to write <code>True</code> and <code>False</code> in place of <code>#t</code> and <code>#f</code>. This is not standard.</p><div class="language-scheme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">scheme</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">scm&gt; #t</span></span>
<span class="line"><span style="color:#ABB2BF;">#t</span></span>
<span class="line"><span style="color:#ABB2BF;">scm&gt; #f</span></span>
<span class="line"><span style="color:#ABB2BF;">#f</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="call-expressions-1" tabindex="-1">Call expressions <a class="header-anchor" href="#call-expressions-1" aria-label="Permalink to &quot;Call expressions&quot;">​</a></h4><p>Like Python, the operator in a Scheme call expression comes before all the operands. Unlike Python, <strong>the operator is included within the parentheses and the operands are separated by spaces rather than with commas.</strong> However, evaluation of a Scheme call expression follows the exact same rules as in Python:</p><ol><li>Evaluate the operator. It should evaluate to a <strong>procedure</strong>.</li><li>Evaluate the operands, left to right.</li><li>Apply the procedure to the evaluated operands.</li></ol><p>Here are some examples using built-in procedures:</p><div class="language-scheme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">scheme</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">scm&gt; (</span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">3</span></span>
<span class="line"><span style="color:#ABB2BF;">scm&gt; (</span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">7</span></span>
<span class="line"><span style="color:#ABB2BF;">scm&gt; (modulo </span><span style="color:#D19A66;">35</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">3</span></span>
<span class="line"><span style="color:#ABB2BF;">scm&gt; (</span><span style="color:#56B6C2;">even?</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">quotient</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">45</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">#t</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="if-expressions" tabindex="-1">if Expressions <a class="header-anchor" href="#if-expressions" aria-label="Permalink to &quot;if Expressions&quot;">​</a></h4><p>The <code>if</code> special form allows us to evaluate one of two expressions based on a predicate. It takes in two required arguments and an optional third argument:</p><div class="language-scheme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">scheme</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> &lt;predicate&gt; &lt;if-true&gt; </span><span style="color:#FFFFFF;">[</span><span style="color:#ABB2BF;">if-false</span><span style="color:#FFFFFF;">]</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>The Scheme <code>if</code> expression, given that it is an expression, <strong>evaluates to some value</strong>. However, the Python <code>if</code> statement <strong>simply directs the flow of the program.</strong></p><p>Another difference between the two is that it&#39;s possible to add more lines of code into the suites of the Python <code>if</code> statement, while a Scheme <code>if</code> expression <strong>expects just a single expression for each of the true result and the false result.</strong></p><p>One final difference is that in Scheme, you cannot write <code>elif</code> cases. If you want to have multiple cases using the <code>if</code> expression, you would need multiple branched <code>if</code> expressions.</p><h4 id="cond-expressions" tabindex="-1">cond Expressions <a class="header-anchor" href="#cond-expressions" aria-label="Permalink to &quot;cond Expressions&quot;">​</a></h4><p>Using nested <code>if</code> expressions doesn&#39;t seem like a very practical way to take care of multiple cases. Instead, we can use the <code>cond</code> special form, a general conditional expression similar to a multi-clause if/elif/else conditional expression in Python. <code>cond</code> takes in an arbitrary number of arguments known as <strong>clauses</strong>. <strong>A clause is written as a list containing two expressions: <code>(&lt;p&gt; &lt;e&gt;)</code>.</strong></p><div class="language-scheme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">scheme</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">cond</span></span>
<span class="line"><span style="color:#ABB2BF;">    (&lt;p1&gt; &lt;e1&gt;)</span></span>
<span class="line"><span style="color:#ABB2BF;">    (&lt;p2&gt; &lt;e2&gt;)</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#ABB2BF;">    (&lt;pn&gt; &lt;en&gt;)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#FFFFFF;">[</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> &lt;else-expression&gt;)</span><span style="color:#FFFFFF;">]</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>The first expression in each clause is a predicate. The second expression in the clause is the return expression corresponding to its predicate. The optional <code>else</code> clause has no predicate.</p><p>The rules of evaluation are as follows:</p><ol><li>Evaluate the predicates <code>&lt;p1&gt;</code>, <code>&lt;p2&gt;</code>, ..., <code>&lt;pn&gt;</code> in order until you reach one that evaluates to a truth-y value.</li><li>If you reach a predicate that evaluates to a truth-y value, evaluate and return the corresponding expression in the clause.</li><li>If none of the predicates are truth-y and there is an <code>else</code> clause, evaluate and return <code>&lt;else-expression&gt;</code>.</li></ol><h3 id="lists" tabindex="-1">Lists <a class="header-anchor" href="#lists" aria-label="Permalink to &quot;Lists&quot;">​</a></h3><p>Scheme lists are very similar to the linked lists. A Scheme list is constructed with a series of pairs, which are created with the constructor <code>cons</code>. It require that the <code>cdr</code> is either another list or <code>nil</code>, an empty list. A list is displayed in the interpreter as a sequence of values (similar to the <code>__str__</code> representation of a <code>Link</code> object).</p><div class="language-scheme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">scheme</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">scm&gt; (</span><span style="color:#C678DD;">define</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">cons</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">cons</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">cons</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;"> nil))))  </span><span style="color:#7F848E;font-style:italic;">; Assign the list to the name a</span></span>
<span class="line"><span style="color:#ABB2BF;">a</span></span>
<span class="line"><span style="color:#ABB2BF;">scm&gt; a</span></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">scm&gt; (</span><span style="color:#56B6C2;">car</span><span style="color:#ABB2BF;"> a)</span></span>
<span class="line"><span style="color:#ABB2BF;">1</span></span>
<span class="line"><span style="color:#ABB2BF;">scm&gt; (</span><span style="color:#56B6C2;">cdr</span><span style="color:#ABB2BF;"> a)</span></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">scm&gt; (</span><span style="color:#56B6C2;">car</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">cdr</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">cdr</span><span style="color:#ABB2BF;"> a)))</span></span>
<span class="line"><span style="color:#ABB2BF;">3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>There are a few other ways to create lists. <strong>The <code>list</code> procedure</strong> takes in an arbitrary number of arguments and constructs a list with the values of these arguments:</p><div class="language-scheme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">scheme</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">scm&gt; (</span><span style="color:#56B6C2;">list</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">scm&gt; (</span><span style="color:#56B6C2;">list</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">list</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">) </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">) </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">scm&gt; (</span><span style="color:#56B6C2;">list</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">cons</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">cons</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> nil)) </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">((</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">) </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Note that all of the operands in this expression are evaluated before being put into the resulting list.</p><p>We can also use the quote form to create a list, which will construct the exact list that is given. Unlike with the <code>list</code> procedure, the argument to <code>&#39;</code> is not evaluated.</p><div class="language-scheme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">scheme</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">scm&gt; </span><span style="color:#98C379;">&#39;</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">scm&gt; </span><span style="color:#98C379;">&#39;</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">cons</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">; Argument to quote is not evaluated</span></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">cons</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">scm&gt; </span><span style="color:#98C379;">&#39;</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>There are a few other built-in procedures in Scheme that are used for lists.</p><div class="language-scheme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">scheme</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">scm&gt; (</span><span style="color:#56B6C2;">null?</span><span style="color:#ABB2BF;"> nil)                </span><span style="color:#7F848E;font-style:italic;">; Checks if a value is the empty list</span></span>
<span class="line"><span style="color:#ABB2BF;">True</span></span>
<span class="line"><span style="color:#ABB2BF;">scm&gt; (</span><span style="color:#56B6C2;">append</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">) </span><span style="color:#98C379;">&#39;</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">)) </span><span style="color:#7F848E;font-style:italic;">; Concatenates two lists</span></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">scm&gt; (</span><span style="color:#56B6C2;">length</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">))      </span><span style="color:#7F848E;font-style:italic;">; Returns the number of elements in a list</span></span>
<span class="line"><span style="color:#ABB2BF;">5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="special-form" tabindex="-1">Special Form <a class="header-anchor" href="#special-form" aria-label="Permalink to &quot;Special Form&quot;">​</a></h3><h4 id="define-procedures" tabindex="-1">Define procedures <a class="header-anchor" href="#define-procedures" aria-label="Permalink to &quot;Define procedures&quot;">​</a></h4><p>The special form <code>define</code> is used to define variables and functions in Scheme. There are two versions of the <code>define</code> special form. To define variables, we use the <code>define</code> form with the following syntax:</p><div class="language-scheme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">scheme</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">define</span><span style="color:#ABB2BF;"> &lt;name&gt; &lt;expression&gt;)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>The rules to evaluate this expression are</p><ol><li>Evaluate the <code>&lt;expression&gt;</code>.</li><li>Bind its value to the <code>&lt;name&gt;</code> in the current frame.</li><li>Return <code>&lt;name&gt;</code>.</li></ol><p>The second version of <code>define</code> is used to define procedures:</p><div class="language-scheme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">scheme</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">define</span><span style="color:#ABB2BF;"> (&lt;name&gt; &lt;param1&gt; &lt;param2&gt; ...) &lt;body&gt; )</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>To evaluate this expression:</p><ol><li><strong>Create a lambda procedure with the given parameters</strong> and <code>&lt;body&gt;</code>.</li><li>Bind the procedure to the <code>&lt;name&gt;</code> in the current frame.</li><li>Return <code>&lt;name&gt;</code>.</li></ol><p>The following two expressions are equivalent:</p><div class="language-scheme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">scheme</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">scm&gt; (</span><span style="color:#C678DD;">define</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">lambda</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">x y</span><span style="color:#ABB2BF;">) (</span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> x y)))</span></span>
<span class="line"><span style="color:#ABB2BF;">foo</span></span>
<span class="line"><span style="color:#ABB2BF;">scm&gt; (</span><span style="color:#C678DD;">define</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">foo</span><span style="color:#ABB2BF;font-style:italic;"> x y</span><span style="color:#ABB2BF;">) (</span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> x y))</span></span>
<span class="line"><span style="color:#ABB2BF;">foo</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="lambdas" tabindex="-1">Lambdas <a class="header-anchor" href="#lambdas" aria-label="Permalink to &quot;Lambdas&quot;">​</a></h4><p>All Scheme procedures are lambda procedures. To create a lambda procedure, we can use the <code>lambda</code> special form:</p><div class="language-scheme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">scheme</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">(lambda (&lt;param1&gt; &lt;param2&gt; ...) &lt;body&gt;)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>This expression will create and return a function with the given parameters and body, but it will not alter the current environment.</p><p>The function will <strong>simply return the value of the last expression in the body.</strong></p><h4 id="quote-and-quasiquote" tabindex="-1">Quote and Quasiquote <a class="header-anchor" href="#quote-and-quasiquote" aria-label="Permalink to &quot;Quote and Quasiquote&quot;">​</a></h4><p>The quote special form takes in a single operand. It returns this operand exactly as is, without evaluating it. Note that this special form can be used to return any value, not just a list.</p><p>Similarly, a quasiquote, denoted with a backtick symbol, returns an expression without evaluating it. However, parts of that expression can be unquoted, denoted using a comma, and those unquoted parts are evaluated.</p><h4 id="eq-equal" tabindex="-1">=, eq?, equal? <a class="header-anchor" href="#eq-equal" aria-label="Permalink to &quot;=, eq?, equal?&quot;">​</a></h4><ul><li><code>=</code> can only be used for comparing numbers.</li><li><code>eq?</code> behaves like == in Python for comparing two non-pairs (numbers, booleans, etc.). Otherwise, eq? behaves like is in Python.</li><li><code>equal?</code> compares pairs by determining if their cars are equal? and their cdrs are equal?(that is, they have the same contents). Otherwise, equal? behaves like eq?</li></ul><h3 id="sierpinski-s-triangle" tabindex="-1">Sierpinski&#39;s Triangle <a class="header-anchor" href="#sierpinski-s-triangle" aria-label="Permalink to &quot;Sierpinski&#39;s Triangle&quot;">​</a></h3><div class="language-scheme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">scheme</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">define</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">line</span><span style="color:#ABB2BF;font-style:italic;"> len</span><span style="color:#ABB2BF;">) (fd len))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">define</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">repeat</span><span style="color:#ABB2BF;font-style:italic;"> k fn</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    (fn)</span></span>
<span class="line"><span style="color:#ABB2BF;">    (</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> k </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) (repeat (</span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> k </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) fn)))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">define</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">pentagram</span><span style="color:#ABB2BF;font-style:italic;"> len</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    (repeat </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">lambda</span><span style="color:#ABB2BF;"> () (line len) (rt </span><span style="color:#D19A66;">144</span><span style="color:#ABB2BF;">))))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">define</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">tri</span><span style="color:#ABB2BF;font-style:italic;"> fn</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    (repeat </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">lambda</span><span style="color:#ABB2BF;"> () (fn) (lt </span><span style="color:#D19A66;">120</span><span style="color:#ABB2BF;">))))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">define</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">sier</span><span style="color:#ABB2BF;font-style:italic;"> d len</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    (tri (</span><span style="color:#C678DD;">lambda</span><span style="color:#ABB2BF;"> () (</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> d </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) (fd len) (leg d len)))))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">define</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">leg</span><span style="color:#ABB2BF;font-style:italic;"> d len</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    (sier (</span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> d </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) (</span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;"> len </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">    (penup) (fd len) (pendown))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">(rt </span><span style="color:#D19A66;">90</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">(speed </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">(sier </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">400</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="tail-recursion" tabindex="-1">Tail Recursion <a class="header-anchor" href="#tail-recursion" aria-label="Permalink to &quot;Tail Recursion&quot;">​</a></h3><p>Scheme implements tail-call optimization, which allows programmers to write recursive functions that <strong>use a constant amount of space. A tail call occurs when a function calls another function as its last action of the current frame.</strong> In this case, the frame is no longer needed, and we can remove it from memory. In other words, <strong>if this is the last thing you are going to do in a function call, we can reuse the current frame instead of making a new frame</strong>.</p><p>Consider this implementation of factorial.</p><div class="language-scheme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">scheme</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">define</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">fact</span><span style="color:#ABB2BF;font-style:italic;"> n</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	(</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> n </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#ABB2BF;">		(</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> n (fact (</span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> n </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)))))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>The recursive call occurs in the last line, but it is not the last expression evaluated. After calling <code>(fact (- n 1))</code>, the function still needs to multiply that result with n. The final expression that is evaluated is a call to the multiplication function, not fact itself. Therefore, the recursive call is not a tail call.</p><p>We can rewrite this function using a helper function that remembers the temporary product that we have calculated so far in each recursive step.</p><div class="language-scheme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">scheme</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">define</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">fact</span><span style="color:#ABB2BF;font-style:italic;"> n</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	(</span><span style="color:#C678DD;">define</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">fact-tail</span><span style="color:#ABB2BF;font-style:italic;"> n result</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		(</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> n </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">			result</span></span>
<span class="line"><span style="color:#ABB2BF;">			(fact-tail (</span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> n </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) (</span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> n result))))</span></span>
<span class="line"><span style="color:#ABB2BF;">	(fact-tail n </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="tail-context" tabindex="-1">Tail context <a class="header-anchor" href="#tail-context" aria-label="Permalink to &quot;Tail context&quot;">​</a></h4><p>When trying to identify whether a given function call within the body of a function is a tail call, we look for whether the call expression is in tail context. Given that each of the following expressions is the last expression in the body of the function, the following expressions are tail contexts:</p><ul><li>the second or third operand in an if expression</li><li>any of the non-predicate sub-expressions in a cond expression (i.e. the second expression of each clause)</li><li>the last operand in an and or an or expression</li><li>the last operand in a begin expression’s body</li><li>the last operand in a let expression’s body</li></ul><h3 id="macros" tabindex="-1">Macros <a class="header-anchor" href="#macros" aria-label="Permalink to &quot;Macros&quot;">​</a></h3><div class="language-scheme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">scheme</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">scm&gt; (define-macro (twice f) (</span><span style="color:#56B6C2;">list</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&#39;begin</span><span style="color:#ABB2BF;"> f f))</span></span>
<span class="line"><span style="color:#ABB2BF;">twice</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>define-macro</code> allows us to define what’s known as a macro, which is simply a way for us to combine unevaluated input expressions together into another expression. When we call macros, the operands are not evaluated, but rather are treated as Scheme data. This means that any operands that are call expressions or special form expression are treated like lists.</p><p>The rules for evaluating calls to macro procedures are:</p><ol><li>Evaluate operator</li><li>Apply operator to unevaluated operands</li><li>Evaluate the expression returned by the macro in the frame it was called in</li></ol><h3 id="streams" tabindex="-1">Streams <a class="header-anchor" href="#streams" aria-label="Permalink to &quot;Streams&quot;">​</a></h3><p>Because <code>cons</code> is a regular procedure and both its operands must be evaluted before the pair is constructed, we cannot create an infinite sequence of integers using a Scheme list. Instead, our Scheme interpreter supports streams, which are lazy Scheme lists. The first element is represented explicitly, but <strong>the rest of the stream’s elements are computed only when needed</strong>. Computing a value only when it’s needed is also known as <strong>lazy evaluation</strong>.</p><p>We use the special form <code>cons-stream</code> to create a stream. To actually get the rest of the stream, we must call <code>cdr-stream</code> on it to force the promise to be evaluated.</p><p>Here’s a summary of what we just went over:</p><ul><li><code>nil</code> is the empty stream</li><li><code>cons-stream</code> constructs a stream containing the value of the first operand and a promise to evaluate the second operand</li><li><code>car</code> returns the first element of the stream</li><li><code>cdr-stream</code> computes and returns the rest of stream</li></ul><h2 id="sql" tabindex="-1">SQL <a class="header-anchor" href="#sql" aria-label="Permalink to &quot;SQL&quot;">​</a></h2><p>SQL is an example of a declarative programming language. Statements do not describe computations directly, but instead describe the desired result of some computation. It is the role of the query interpreter of the database system to plan and perform a computational process to produce such a result.</p><p>In SQL, data is organized into tables. A table has a fixed number of named columns. A row of the table represents a single data record and has one value for each column. Table used in examples below:</p><table><thead><tr><th>Name</th><th>Division</th><th>Title</th><th>Salary</th><th>Supervisor</th></tr></thead><tbody><tr><td>Ben Bitdiddle</td><td>Computer</td><td>Wizard</td><td>60000</td><td>Oliver Warbucks</td></tr><tr><td>Alyssa P Hacker</td><td>Computer</td><td>Programmer</td><td>40000</td><td>Ben Bitdiddle</td></tr><tr><td>Cy D Fect</td><td>Computer</td><td>Programmer</td><td>35000</td><td>Ben Bitdiddle</td></tr><tr><td>Lem E Tweakit</td><td>Computer</td><td>Technician</td><td>25000</td><td>Ben Bitdiddle</td></tr><tr><td>Louis Reasoner</td><td>Computer</td><td>Programmer Trainee</td><td>30000</td><td>Alyssa P Hacker</td></tr><tr><td>Robert Cratchet</td><td>Administration</td><td>Big Wheel</td><td>150000</td><td>Oliver Warbucks</td></tr><tr><td>Eben Scrooge</td><td>Accounting</td><td>Chief Accountant</td><td>75000</td><td>Oliver Warbucks</td></tr><tr><td>Robert Cratchet</td><td>Accounting</td><td>Scrivener</td><td>18000</td><td>Eben Scrooge</td></tr></tbody></table><h3 id="creating-tables" tabindex="-1">Creating Tables <a class="header-anchor" href="#creating-tables" aria-label="Permalink to &quot;Creating Tables&quot;">​</a></h3><p>We can use a <code>SELECT</code> statement to create tables. The following statement creates a table with a single row, with columns named “first&quot; and ”last&quot;:</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">sqlite</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">SELECT</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Ben&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">AS</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">first</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Bitdiddle&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">AS</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">last</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">Ben|Bitdiddle</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Given two tables with the same number of columns, we can combine their rows into a larger table with <code>UNION</code>:</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">sqlite</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">SELECT</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Ben&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">AS</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">first</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Bitdiddle&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">AS</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">last</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">UNION</span></span>
<span class="line"><span style="color:#ABB2BF;">   ...</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">SELECT</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Louis&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Reasoner&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">Ben|Bitdiddle</span></span>
<span class="line"><span style="color:#ABB2BF;">Louis|Reasoner</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>To save a table, use <code>CREATE TABLE</code> and a name. Here we’re going to create the table of employees from the previous section and assign it to the name records:</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">sqlite</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">CREATE</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">TABLE</span><span style="color:#ABB2BF;"> records </span><span style="color:#C678DD;">AS</span></span>
<span class="line"><span style="color:#ABB2BF;">   ...</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;">   </span><span style="color:#C678DD;">SELECT</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Ben Bitdiddle&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">AS</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Computer&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">AS</span><span style="color:#ABB2BF;"> division, </span><span style="color:#98C379;">&quot;Wizard&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">AS</span><span style="color:#ABB2BF;"> title, </span><span style="color:#D19A66;">60000</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">AS</span><span style="color:#ABB2BF;"> salary, </span><span style="color:#98C379;">&quot;Oliver Warbucks&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">AS</span><span style="color:#ABB2BF;"> supervisor </span><span style="color:#C678DD;">UNION</span></span>
<span class="line"><span style="color:#ABB2BF;">   ...</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;">   </span><span style="color:#C678DD;">SELECT</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Alyssa P Hacker&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Computer&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Programmer&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">40000</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Ben Bitdiddle&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">UNION</span><span style="color:#ABB2BF;"> ... ;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>We can <code>SELECT</code> specific values from an existing table using a <code>FROM</code> clause.</p><p>The special syntax <code>SELECT *</code> will select all columns from a table. It’s an easy way to print the contents of a table.</p><p>We can choose which columns to show in the first part of the <code>SELECT</code>, we can filter out rows using a <code>WHERE</code> clause, and sort the resulting rows with an <code>ORDER BY</code> clause (In non-decreasing order by default).</p><p>In general the syntax is:</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">SELECT</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">[columns]</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">FROM</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">[tables]</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">WHERE</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">[condition]</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">ORDER BY</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">[criteria]</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Note that all valid SQL statements must be terminated by a semicolon (😉. Additionally, you can split up your statement over many lines and add as much whitespace as you want, much like Scheme.</p><h3 id="joins" tabindex="-1">Joins <a class="header-anchor" href="#joins" aria-label="Permalink to &quot;Joins&quot;">​</a></h3><p>Data are combined by joining multiple tables together into one, a fundamental operation in database systems. There are many methods of joining, all closely related, but we will focus on just one method (the inner join) in this class. When tables are joined, <strong>the resulting table contains a new row for each combination of rows in the input tables</strong>. If two tables are joined and the left table has <em>m</em> rows and the right table has <em>n</em> rows, then the joined table will have <em>mn</em> rows. Joins are expressed in SQL by separating table names by commas in the <code>FROM</code> clause of a <code>SELECT</code> statement.</p><p>SQL allows us to join a table with itself by giving aliases to tables within a <code>FROM</code> clause using the keyword <code>AS</code> and to refer to a column within a particular table using a dot expression. In the example below we find the name and title of Louis Reasoner’s supervisor.</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">sqlite</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">SELECT</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">b</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">b</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">title</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">FROM</span><span style="color:#ABB2BF;"> records </span><span style="color:#C678DD;">AS</span><span style="color:#ABB2BF;"> a, records </span><span style="color:#C678DD;">AS</span><span style="color:#ABB2BF;"> b</span></span>
<span class="line"><span style="color:#ABB2BF;">   ...</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;">   </span><span style="color:#C678DD;">WHERE</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Louis Reasoner&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">AND</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">supervisor</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">b</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">Alyssa P Hacker | Programmer</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="aggregation" tabindex="-1">Aggregation <a class="header-anchor" href="#aggregation" aria-label="Permalink to &quot;Aggregation&quot;">​</a></h3><p>We can use the <code>MAX</code>, <code>MIN</code>, <code>COUNT</code>, and <code>SUM</code> functions to retrieve more information from our initial tables.</p><p>If we wanted to find the name and salary of the employee who makes the most money, we might say</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">sqlite</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">SELECT</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">MAX</span><span style="color:#ABB2BF;">(salary) </span><span style="color:#C678DD;">FROM</span><span style="color:#ABB2BF;"> records;</span></span>
<span class="line"><span style="color:#ABB2BF;">Oliver Warbucks|</span><span style="color:#D19A66;">150000</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Using the special <code>COUNT(*)</code> syntax, we can count the number of rows in our table to see the number of employees at the company.</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">sqlite</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">SELECT</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">COUNT</span><span style="color:#ABB2BF;">(*) </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> RECORDS;</span></span>
<span class="line"><span style="color:#D19A66;">9</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>These commands can be performed on specific sets of rows in our table by using the GROUP BY [column name] clause. This clause takes all of the rows that have the same value in column name and groups them together.</p><p>We can find the miniumum salary earned in each division of the company.</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">sqlite</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">SELECT</span><span style="color:#ABB2BF;"> division, </span><span style="color:#56B6C2;">MIN</span><span style="color:#ABB2BF;">(salary) </span><span style="color:#C678DD;">FROM</span><span style="color:#ABB2BF;"> records </span><span style="color:#C678DD;">GROUP BY</span><span style="color:#ABB2BF;"> division;</span></span>
<span class="line"><span style="color:#ABB2BF;">Computer|</span><span style="color:#D19A66;">25000</span></span>
<span class="line"><span style="color:#ABB2BF;">Administration|</span><span style="color:#D19A66;">25000</span></span>
<span class="line"><span style="color:#ABB2BF;">Accounting|</span><span style="color:#D19A66;">18000</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>These groupings can be additionally filtered by the <code>HAVING</code> clause. In contrast to the <code>WHERE</code> clause, which filters out rows, the <code>HAVING</code> clause filters out entire groups.</p><p>To find all titles that are held by more than one person, we say</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">sqlite</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">SELECT</span><span style="color:#ABB2BF;"> title </span><span style="color:#C678DD;">FROM</span><span style="color:#ABB2BF;"> records </span><span style="color:#C678DD;">GROUP BY</span><span style="color:#ABB2BF;"> title </span><span style="color:#C678DD;">HAVING</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">count</span><span style="color:#ABB2BF;">(*) </span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">Programmer</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="create-table-and-drop-table" tabindex="-1">Create Table and Drop Table <a class="header-anchor" href="#create-table-and-drop-table" aria-label="Permalink to &quot;Create Table and Drop Table&quot;">​</a></h3><p>Create Empty Table:</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">CREATE</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">TABLE</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">numbers</span><span style="color:#ABB2BF;">(n, note);</span></span>
<span class="line"><span style="color:#C678DD;">CREATE</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">TABLE</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">numbers</span><span style="color:#ABB2BF;">(n </span><span style="color:#C678DD;">UNIQUE</span><span style="color:#ABB2BF;">, note);</span></span>
<span class="line"><span style="color:#C678DD;">CREATE</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">TABLE</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">numbers</span><span style="color:#ABB2BF;">(n, note </span><span style="color:#C678DD;">DEFAULT</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;No Comment&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Drop Table:</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">DROP</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">TABLE</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">[IF EXISTS]</span><span style="color:#ABB2BF;"> numbers;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="modifying-tables" tabindex="-1">Modifying Tables <a class="header-anchor" href="#modifying-tables" aria-label="Permalink to &quot;Modifying Tables&quot;">​</a></h3><h4 id="insert" tabindex="-1">INSERT <a class="header-anchor" href="#insert" aria-label="Permalink to &quot;INSERT&quot;">​</a></h4><p>For a table <code>t</code> with two columns, to insert into one column:</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">INSERT INTO</span><span style="color:#ABB2BF;"> t(column) </span><span style="color:#C678DD;">VALUES</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">value</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>To insert into both columns:</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">INSERT INTO</span><span style="color:#ABB2BF;"> t </span><span style="color:#C678DD;">VALUES</span><span style="color:#ABB2BF;">(value0, value1);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="update" tabindex="-1">UPDATE <a class="header-anchor" href="#update" aria-label="Permalink to &quot;UPDATE&quot;">​</a></h4><p>Update sets all entries in certain columns to new values, just for some subset of rows.</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">UPDATE</span><span style="color:#ABB2BF;"> numbers </span><span style="color:#C678DD;">SET</span><span style="color:#ABB2BF;"> n </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">WHERE</span><span style="color:#ABB2BF;"> note </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;No Comment&quot;</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="delete" tabindex="-1">DELETE <a class="header-anchor" href="#delete" aria-label="Permalink to &quot;DELETE&quot;">​</a></h4><p>Delete removes some or all rows from a table.</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">DELETE</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">FROM</span><span style="color:#ABB2BF;"> numbers </span><span style="color:#C678DD;">WHERE</span><span style="color:#ABB2BF;"> n </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,372),t=[p];function r(c,i,B,y,d,u){return a(),n("div",null,t)}const F=s(o,[["render",r]]);export{A as __pageData,F as default};
