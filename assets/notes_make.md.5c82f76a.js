import{_ as s,c as n,o as a,U as l}from"./chunks/framework.97e4ff17.js";const d=JSON.parse('{"title":"Make 和 CMake 的使用","description":"","frontmatter":{"title":"Make 和 CMake 的使用","outline":[2,3,4]},"headers":[],"relativePath":"notes/make.md","lastUpdated":1680787963000}'),p={name:"notes/make.md"},e=l(`<h1 id="make-和-cmake-的使用" tabindex="-1">Make 和 CMake 的使用 <a class="header-anchor" href="#make-和-cmake-的使用" aria-label="Permalink to &quot;Make 和 CMake 的使用&quot;">​</a></h1><p>本文简单介绍如何使用命令行工具编译。在此之前，先简单说说 C/C++ 文件的编译过程。</p><h2 id="c-c-文件编译过程" tabindex="-1">C/C++ 文件编译过程 <a class="header-anchor" href="#c-c-文件编译过程" aria-label="Permalink to &quot;C/C++ 文件编译过程&quot;">​</a></h2><ol><li>预处理：源代码（*.c 或 *.cpp）经预处理变为预处理文件（*.i），主要进行宏替换。</li><li>编译：将预处理文件（*.i）编译成汇编文件（*.s）</li><li>汇编：把汇编文件（*.s）转换成目标文件（Object File，在 Windows 下是 *.obj 文件，Linux 下则是 *.o）。</li><li>链接：将目标文件、库文件、启动文件等链接起来生成可执行文件。</li></ol><p>源代码到 *.o：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">$ </span><span style="color:#98C379;">gcc</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-c</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">test.c</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-o</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">test.o</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>或</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">$ </span><span style="color:#98C379;">gcc</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-c</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">test.c</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>*.o 到可执行文件：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">$ </span><span style="color:#98C379;">gcc</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">test.o</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-o</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">test</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>或</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">$ </span><span style="color:#98C379;">g++</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-o</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">test</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">test.o</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>对于 *.cpp 文件，只要把 gcc 换成 g++。</p><p>事实上从源代码可以直接生成可执行文件：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">$ </span><span style="color:#98C379;">gcc</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">test.c</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-o</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">test</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>但是先生成目标文件的好处在于，编译大项目时，如果只修改了部分文件，可以只编译生成对应的目标文件然后直接链接，可以节省很多编译时间。</p><h2 id="make-和-makefile" tabindex="-1">Make 和 Makefile <a class="header-anchor" href="#make-和-makefile" aria-label="Permalink to &quot;Make 和 Makefile&quot;">​</a></h2><h3 id="什么是-make" tabindex="-1">什么是 Make <a class="header-anchor" href="#什么是-make" aria-label="Permalink to &quot;什么是 Make&quot;">​</a></h3><blockquote><p>In software development, Make is a build automation tool that automatically builds executable programs and libraries from source code by reading files called Makefiles which specify how to derive the target program. --Wikipedia</p></blockquote><p>写好了 Makefile 以后，使用 <code>make</code> 命令即可编译。Make 有许多不同的版本，最常用的是 GNU Make.</p><h3 id="makefile-语法" tabindex="-1">Makefile 语法 <a class="header-anchor" href="#makefile-语法" aria-label="Permalink to &quot;Makefile 语法&quot;">​</a></h3><h4 id="基本语法" tabindex="-1">基本语法 <a class="header-anchor" href="#基本语法" aria-label="Permalink to &quot;基本语法&quot;">​</a></h4><div class="language-makefile line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">targets</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> prerequisites</span></span>
<span class="line"><span style="color:#E5C07B;">	command</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><p>targets：规则的目标，可以是目标文件（*.o），也可以是可执行文件，还可以是一个标签；</p></li><li><p>prerequisites：是我们的<strong>依赖文件</strong>，要生成 targets 需要的文件或者是目标。可以是多个，也可以没有；</p></li></ul><ul><li>command：make 需要执行的命令（<strong>任意的 shell 命令</strong>）。可以有多条命令，每一条命令占一行。</li></ul><p>prerequisites 中如果<strong>有一个以上的文件比 target 文件要新</strong>的话，command 所定义的命令就会被执行。</p><p>注意：command 前<strong>必须有一个 tab</strong>。</p><p>那么简单的 Makefile 如下：</p><div class="language-makefile line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> test.cpp </span><span style="color:#7F848E;font-style:italic;"># comment</span></span>
<span class="line"><span style="color:#E5C07B;">	g++ -c test.cpp -o test.o</span></span>
<span class="line"><span style="color:#E5C07B;">	g++ test.o -o test</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>其中 test.cpp 内容：</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">namespace</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;hello world</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>文件结构：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">$ </span><span style="color:#98C379;">ls</span></span>
<span class="line"><span style="color:#ABB2BF;">Makefile </span><span style="color:#98C379;">test.cpp</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>之后在含 Makefile 的目录下用命令 make 即可编译：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">$ </span><span style="color:#98C379;">make</span></span>
<span class="line"><span style="color:#ABB2BF;">g++ </span><span style="color:#D19A66;">-c</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">test.cpp</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-o</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">test.o</span></span>
<span class="line"><span style="color:#ABB2BF;">g++ </span><span style="color:#98C379;">test.o</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-o</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">test</span></span>
<span class="line"><span style="color:#ABB2BF;">$ </span><span style="color:#98C379;">ls</span></span>
<span class="line"><span style="color:#ABB2BF;">Makefile  </span><span style="color:#98C379;">test</span><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">test.cpp</span><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">test.o</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>对于大型一点的工程，就需要用到下面的语法。</p><h4 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h4><p>定义时很简单，使用 <code>变量名=变量值</code>，使用时用 <code>\${变量名}</code> 或 <code>$(变量名)</code> 的形式。事实上这里称作变量并不是太合适，因为在使用变量时只是进行了宏替换。例如上面的 Makefile 可以改成</p><div class="language-makefile line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E06C75;">CC</span><span style="color:#ABB2BF;">=</span><span style="color:#E5C07B;">g++</span></span>
<span class="line"><span style="color:#E06C75;">TARGET</span><span style="color:#ABB2BF;">=</span><span style="color:#E5C07B;">test</span></span>
<span class="line"><span style="color:#E06C75;">SRC</span><span style="color:#ABB2BF;">=</span><span style="color:#E5C07B;">test.cpp</span></span>
<span class="line"><span style="color:#E06C75;">OBJ</span><span style="color:#ABB2BF;">=</span><span style="color:#E5C07B;">test.o</span></span>
<span class="line"><span style="color:#98C379;">\${</span><span style="color:#E06C75;">TARGET</span><span style="color:#98C379;">}</span><span style="color:#E5C07B;">: </span><span style="color:#98C379;">\${</span><span style="color:#E06C75;">SRC</span><span style="color:#98C379;">}</span></span>
<span class="line"><span style="color:#E5C07B;">	</span><span style="color:#98C379;">\${</span><span style="color:#E06C75;">CC</span><span style="color:#98C379;">}</span><span style="color:#E5C07B;"> -c </span><span style="color:#98C379;">\${</span><span style="color:#E06C75;">SRC</span><span style="color:#98C379;">}</span><span style="color:#E5C07B;"> -o </span><span style="color:#98C379;">\${</span><span style="color:#E06C75;">OBJ</span><span style="color:#98C379;">}</span></span>
<span class="line"><span style="color:#E5C07B;">	</span><span style="color:#98C379;">\${</span><span style="color:#E06C75;">CC</span><span style="color:#98C379;">}</span><span style="color:#E5C07B;"> </span><span style="color:#98C379;">\${</span><span style="color:#E06C75;">OBJ</span><span style="color:#98C379;">}</span><span style="color:#E5C07B;"> -o </span><span style="color:#98C379;">\${</span><span style="color:#E06C75;">TARGET</span><span style="color:#98C379;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="通配符" tabindex="-1">通配符 <a class="header-anchor" href="#通配符" aria-label="Permalink to &quot;通配符&quot;">​</a></h4><p>shell 支持的通配符（类似于正则）都可以在 Makefile 中使用，有如下通配符：</p><table><thead><tr><th style="text-align:center;">通配符</th><th style="text-align:center;">使用说明</th></tr></thead><tbody><tr><td style="text-align:center;">*</td><td style="text-align:center;">匹配 0 个或者是任意个字符</td></tr><tr><td style="text-align:center;">？</td><td style="text-align:center;">匹配任意一个字符</td></tr><tr><td style="text-align:center;">[]</td><td style="text-align:center;">我们可以指定匹配的字符放在 &quot;[]&quot; 中</td></tr></tbody></table><p>此外，在 Makefile 中，字符 <code>%</code> 也可以用于匹配任意个字符（shell 中不可），使用在我们的的规则当中，可以快速生成 <code>.o</code> 文件（使用类似循环的方式） ，这个在后面的例子中会体现。</p><h4 id="自动化变量" tabindex="-1">自动化变量 <a class="header-anchor" href="#自动化变量" aria-label="Permalink to &quot;自动化变量&quot;">​</a></h4><table><thead><tr><th style="text-align:center;">自动化变量</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">$@</td><td style="text-align:center;">表示规则的目标文件名。</td></tr><tr><td style="text-align:center;">$%</td><td style="text-align:center;">当目标文件是一个静态库文件时，代表静态库的一个成员名。</td></tr><tr><td style="text-align:center;">$&lt;</td><td style="text-align:center;">规则的第一个依赖的文件名。如果是一个目标文件使用隐含的规则来重建，则它代表由隐含规则加入的第一个依赖文件。</td></tr><tr><td style="text-align:center;">$?</td><td style="text-align:center;">所有比目标文件更新的依赖文件列表，空格分隔。如果目标文件时静态库文件，代表的是库文件（.o 文件）。</td></tr><tr><td style="text-align:center;">$^</td><td style="text-align:center;">代表的是所有依赖文件列表，使用空格分隔。如果目标是静态库文件，它所代表的只能是所有的库成员（.o 文件）名。 一个文件可重复的出现在目标的依赖中，变量 <code>\\$^</code> 只记录它的第一次引用的情况。</td></tr><tr><td style="text-align:center;">$+</td><td style="text-align:center;">类似 <code>\\$^</code>，但是它保留了依赖文件中重复出现的文件。主要用在程序链接时库的交叉引用场合。</td></tr></tbody></table><p>读者看到这个表可能已经晕了，不知道到底这些有啥用，事实上我也没有全部看懂，在后面的教程只用到了 <code>$@</code> 和 <code>$&lt;</code>，其他的应该用在一些更高级的项目里，具体遇到再查。</p><h4 id="目标文件搜索" tabindex="-1">目标文件搜索 <a class="header-anchor" href="#目标文件搜索" aria-label="Permalink to &quot;目标文件搜索&quot;">​</a></h4><p>当所需的 *.cpp、*.h 文件不在 Makefile 所在目录下时，需要特别指定其路径，这里有一种更简单的方法，指定 <code>VPATH=src</code>，src 为需要寻找对应文件的地址（具体见后面的例子）。</p><h4 id="例" tabindex="-1">例 <a class="header-anchor" href="#例" aria-label="Permalink to &quot;例&quot;">​</a></h4><p>以我本学期数据结构第一次大作业的工程（银行业务模拟）为例，工程目录：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">$ </span><span style="color:#98C379;">ls</span></span>
<span class="line"><span style="color:#ABB2BF;">Makefile  </span><span style="color:#98C379;">incl/</span><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">src/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>其中 src 里为 *.cpp 文件，incl 里为 *.h 文件。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">$ </span><span style="color:#98C379;">ls</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">incl</span></span>
<span class="line"><span style="color:#ABB2BF;">client.h  </span><span style="color:#98C379;">event.h</span><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">global_variable.h</span><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">main.h</span><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">queue.h</span></span>
<span class="line"><span style="color:#ABB2BF;">$ </span><span style="color:#98C379;">ls</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">src</span></span>
<span class="line"><span style="color:#ABB2BF;">client.cpp  </span><span style="color:#98C379;">event.cpp</span><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">global_variable.cpp</span><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">main.cpp</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>初版 Makefile：</p><div class="language-makefile line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E06C75;">CC</span><span style="color:#ABB2BF;">=</span><span style="color:#E5C07B;">g++</span></span>
<span class="line"><span style="color:#E06C75;">INCL</span><span style="color:#ABB2BF;">=</span><span style="color:#E5C07B;">./incl</span></span>
<span class="line"><span style="color:#E06C75;">SRC</span><span style="color:#ABB2BF;">=</span><span style="color:#E5C07B;">./src</span></span>
<span class="line"><span style="color:#E06C75;">OBJ</span><span style="color:#ABB2BF;">=</span><span style="color:#E5C07B;">client.o event.o global_variable.o main.o</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> </span><span style="color:#98C379;">\${</span><span style="color:#E06C75;">OBJ</span><span style="color:#98C379;">}</span></span>
<span class="line"><span style="color:#E5C07B;">	</span><span style="color:#98C379;">\${</span><span style="color:#E06C75;">CC</span><span style="color:#98C379;">}</span><span style="color:#E5C07B;"> -o test </span><span style="color:#98C379;">\${</span><span style="color:#E06C75;">OBJ</span><span style="color:#98C379;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">client.o</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> </span><span style="color:#98C379;">\${</span><span style="color:#E06C75;">INCL</span><span style="color:#98C379;">}</span><span style="color:#E06C75;">/client.h </span><span style="color:#98C379;">\${</span><span style="color:#E06C75;">SRC</span><span style="color:#98C379;">}</span><span style="color:#E06C75;">/client.cpp</span></span>
<span class="line"><span style="color:#E5C07B;">	</span><span style="color:#98C379;">\${</span><span style="color:#E06C75;">CC</span><span style="color:#98C379;">}</span><span style="color:#E5C07B;"> -c </span><span style="color:#98C379;">\${</span><span style="color:#E06C75;">SRC</span><span style="color:#98C379;">}</span><span style="color:#E5C07B;">/client.cpp</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">global_variable.o</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> </span><span style="color:#98C379;">\${</span><span style="color:#E06C75;">INCL</span><span style="color:#98C379;">}</span><span style="color:#E06C75;">/global_variable.h </span><span style="color:#98C379;">\${</span><span style="color:#E06C75;">SRC</span><span style="color:#98C379;">}</span><span style="color:#E06C75;">/global_variable.cpp</span></span>
<span class="line"><span style="color:#E5C07B;">	</span><span style="color:#98C379;">\${</span><span style="color:#E06C75;">CC</span><span style="color:#98C379;">}</span><span style="color:#E5C07B;"> -c </span><span style="color:#98C379;">\${</span><span style="color:#E06C75;">SRC</span><span style="color:#98C379;">}</span><span style="color:#E5C07B;">/global_variable.cpp</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">event.o</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> </span><span style="color:#98C379;">\${</span><span style="color:#E06C75;">INCL</span><span style="color:#98C379;">}</span><span style="color:#E06C75;">/event.h </span><span style="color:#98C379;">\${</span><span style="color:#E06C75;">SRC</span><span style="color:#98C379;">}</span><span style="color:#E06C75;">/event.cpp</span></span>
<span class="line"><span style="color:#E5C07B;">	</span><span style="color:#98C379;">\${</span><span style="color:#E06C75;">CC</span><span style="color:#98C379;">}</span><span style="color:#E5C07B;"> -c </span><span style="color:#98C379;">\${</span><span style="color:#E06C75;">SRC</span><span style="color:#98C379;">}</span><span style="color:#E5C07B;">/event.cpp</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">main.o</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> </span><span style="color:#98C379;">\${</span><span style="color:#E06C75;">INCL</span><span style="color:#98C379;">}</span><span style="color:#E06C75;">/main.h </span><span style="color:#98C379;">\${</span><span style="color:#E06C75;">SRC</span><span style="color:#98C379;">}</span><span style="color:#E06C75;">/main.cpp</span></span>
<span class="line"><span style="color:#E5C07B;">	</span><span style="color:#98C379;">\${</span><span style="color:#E06C75;">CC</span><span style="color:#98C379;">}</span><span style="color:#E5C07B;"> -c </span><span style="color:#98C379;">\${</span><span style="color:#E06C75;">SRC</span><span style="color:#98C379;">}</span><span style="color:#E5C07B;">/main.cpp</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>很明显写起来非常麻烦，每个目标文件都得有对应的处理语句，语句一多就很麻烦。</p><p>之后我们用通配符和自动化变量改进：</p><div class="language-makefile line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E06C75;">CC</span><span style="color:#ABB2BF;">=</span><span style="color:#E5C07B;">g++</span></span>
<span class="line"><span style="color:#E06C75;">INCL</span><span style="color:#ABB2BF;">=</span><span style="color:#E5C07B;">./incl</span></span>
<span class="line"><span style="color:#E06C75;">SRC</span><span style="color:#ABB2BF;">=</span><span style="color:#E5C07B;">./src</span></span>
<span class="line"><span style="color:#E06C75;">OBJ</span><span style="color:#ABB2BF;">=</span><span style="color:#E5C07B;">client.o event.o global_variable.o main.o </span><span style="color:#7F848E;font-style:italic;"># 宏替换，所以有空格也没事</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> </span><span style="color:#98C379;">$(</span><span style="color:#E06C75;">OBJ</span><span style="color:#98C379;">)</span></span>
<span class="line"><span style="color:#E5C07B;">	</span><span style="color:#98C379;">$(</span><span style="color:#E06C75;">CC</span><span style="color:#98C379;">)</span><span style="color:#E5C07B;"> -o test </span><span style="color:#98C379;">$(</span><span style="color:#E06C75;">OBJ</span><span style="color:#98C379;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D19A66;">%</span><span style="color:#61AFEF;">.o</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> </span><span style="color:#98C379;">$(</span><span style="color:#E06C75;">SRC</span><span style="color:#98C379;">)</span><span style="color:#E06C75;">/</span><span style="color:#D19A66;">%</span><span style="color:#E06C75;">.cpp </span><span style="color:#98C379;">$(</span><span style="color:#E06C75;">INCL</span><span style="color:#98C379;">)</span></span>
<span class="line"><span style="color:#E5C07B;">	</span><span style="color:#98C379;">$(</span><span style="color:#E06C75;">CC</span><span style="color:#98C379;">)</span><span style="color:#E5C07B;"> -c $&lt; -o $@ # 也可以简写成 </span><span style="color:#98C379;">$(</span><span style="color:#E06C75;">CC</span><span style="color:#98C379;">)</span><span style="color:#E5C07B;"> -c $&lt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这里 <code>%.o</code> 把我们需要的所有的 <code>.o</code> 文件组合成为一个列表，从列表中挨个取出每一个文件，<code>%</code> 表示取出来文件的文件名（不包含后缀），然后找到文件中和 <code>%</code> 名称相同的 <code>.cpp</code> 文件，然后执行下面的命令，直到列表中的文件全部被取出来为止。</p><p>如果再使用 <code>VPATH</code>，可以最终简化为：</p><div class="language-makefile line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E06C75;">CC</span><span style="color:#ABB2BF;">=</span><span style="color:#E5C07B;">g++</span></span>
<span class="line"><span style="color:#E06C75;">OBJ</span><span style="color:#ABB2BF;">=</span><span style="color:#E5C07B;">client.o event.o global_variable.o main.o</span></span>
<span class="line"><span style="color:#E06C75;">VPATH</span><span style="color:#ABB2BF;">=</span><span style="color:#E5C07B;">src incl</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> </span><span style="color:#98C379;">$(</span><span style="color:#E06C75;">OBJ</span><span style="color:#98C379;">)</span></span>
<span class="line"><span style="color:#E5C07B;">	</span><span style="color:#98C379;">$(</span><span style="color:#E06C75;">CC</span><span style="color:#98C379;">)</span><span style="color:#E5C07B;"> -o test </span><span style="color:#98C379;">$(</span><span style="color:#E06C75;">OBJ</span><span style="color:#98C379;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D19A66;">%</span><span style="color:#61AFEF;">.o</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">%</span><span style="color:#E06C75;">.cpp</span></span>
<span class="line"><span style="color:#E5C07B;">	</span><span style="color:#98C379;">\${</span><span style="color:#E06C75;">CC</span><span style="color:#98C379;">}</span><span style="color:#E5C07B;"> -c $&lt; -o $@</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>此外，也可以写一个伪目标用于清除过程中生成的 *.o 文件：</p><div class="language-makefile line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#56B6C2;">.PHONY</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> clean</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">clean</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E5C07B;">	rm -rf </span><span style="color:#98C379;">$(</span><span style="color:#E06C75;">OBJ</span><span style="color:#98C379;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>其中 clean 不是一个文件，因此也不会被 Makefile 执行，只有执行 <code>make clean</code> 才会调用 clean 里的 command。<code>.PHONY</code> 的作用有二：</p><ul><li>避免 Makefile 中定义的只执行的命令的目标和工作目录下的实际文件出现名字冲突。</li><li>提高执行 make 时的效率。</li></ul><p>PS：写 OBJ 的列表也有点麻烦，我尝试在 Makefile 写一个获取该列表的函数，但是没有成功，只能写了个 Python 脚本：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;font-style:italic;">import</span><span style="color:#ABB2BF;"> os</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;font-style:italic;">for</span><span style="color:#ABB2BF;"> fileName </span><span style="color:#C678DD;font-style:italic;">in</span><span style="color:#ABB2BF;"> os.</span><span style="color:#61AFEF;">listdir</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;./src&#39;</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">    s </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> os.path.</span><span style="color:#61AFEF;">splitext</span><span style="color:#ABB2BF;">(fileName)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;font-style:italic;">if</span><span style="color:#ABB2BF;"> s[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;.cpp&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(s[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;.o&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">end</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot; &quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;"># client.o event.o global_variable.o main.o</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="cmake-和-cmakelists-txt" tabindex="-1">CMake 和 CMakeLists.txt <a class="header-anchor" href="#cmake-和-cmakelists-txt" aria-label="Permalink to &quot;CMake 和 CMakeLists.txt&quot;">​</a></h2><p>CMake 是一个<strong>跨平台的编译工具</strong>，能够输出各种各样的 Makefile 或者项目文件，能测试编译器所支持的 C++ 特性，类似 UNIX 下的 automake. （在 UNIX 中，生成 Makefile，在 Visual Studio 中会生成项目解决方案……）</p><p>安装 CMake 后，输入 cmake，可以发现有三种 Usage：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">$ </span><span style="color:#98C379;">cmake</span></span>
<span class="line"><span style="color:#ABB2BF;">Usage</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  cmake [options] &lt;</span><span style="color:#98C379;">path-to-sourc</span><span style="color:#ABB2BF;">e&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  cmake [options] &lt;</span><span style="color:#98C379;">path-to-existing-buil</span><span style="color:#ABB2BF;">d&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  cmake [options] </span><span style="color:#D19A66;">-S</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">path-to-sourc</span><span style="color:#ABB2BF;">e&gt; </span><span style="color:#D19A66;">-B</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">path-to-buil</span><span style="color:#ABB2BF;">d&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">Specify </span><span style="color:#98C379;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">source</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">directory</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">to</span><span style="color:#ABB2BF;"> (re-)generate </span><span style="color:#98C379;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">build</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">system</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">for</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">it</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">the</span></span>
<span class="line"><span style="color:#ABB2BF;">current </span><span style="color:#98C379;">working</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">directory.</span><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">Specify</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">an</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">existing</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">build</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">directory</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">to</span></span>
<span class="line"><span style="color:#ABB2BF;">re-generate </span><span style="color:#98C379;">its</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">build</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">system.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">Run </span><span style="color:#98C379;">&#39;cmake --help&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">for</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">more</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">information.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>第三种指定的参数最多，也最灵活，后面都使用第三种方式。</p><h3 id="简单的示例" tabindex="-1">简单的示例 <a class="header-anchor" href="#简单的示例" aria-label="Permalink to &quot;简单的示例&quot;">​</a></h3><p>创建源文件 <code>tutorial.cxx</code> 在 <code>Step0</code> 目录下，用于计算平方根：</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// A simple program that computes the square root of a number</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;cmath&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">argc</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">argv</span><span style="color:#ABB2BF;">[]) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (argc </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        std::cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Usage: &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">argv</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot; number&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> inputValue </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">atof</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">argv</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> outputValue </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sqrt</span><span style="color:#ABB2BF;">(inputValue);</span></span>
<span class="line"><span style="color:#ABB2BF;">    std::cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;The square root of &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> inputValue </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot; is &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> outputValue </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>之后在同目录下创建 <code>CMakeLists.txt</code>：</p><div class="language-cmake line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># CMake 最低版本要求</span></span>
<span class="line"><span style="color:#C678DD;">cmake_minimum_required</span><span style="color:#ABB2BF;">(VERSION 3.10)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 设置项目名称和版本</span></span>
<span class="line"><span style="color:#C678DD;">project</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">Test</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 添加可执行文件</span></span>
<span class="line"><span style="color:#C678DD;">add_executable</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">\${PROJECT_NAME}</span><span style="color:#ABB2BF;"> tutorial.cxx) </span><span style="color:#7F848E;font-style:italic;"># \${PROJECT_NAME} 即为 Test，也是最后生成可执行文件的名字</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>之后需要指定需要 build 的目录：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">$ </span><span style="color:#98C379;">mkdir</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">build</span></span>
<span class="line"><span style="color:#ABB2BF;">$ </span><span style="color:#98C379;">cd</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">build</span></span>
<span class="line"><span style="color:#ABB2BF;">$ </span><span style="color:#98C379;">cmake</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-S</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">..</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-B</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">.</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;"># 等价于 cmake ..</span></span>
<span class="line"><span style="color:#ABB2BF;">-- </span><span style="color:#98C379;">The</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">C</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">compiler</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">identification</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">is</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">GNU</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">9.3.0</span></span>
<span class="line"><span style="color:#ABB2BF;">-- </span><span style="color:#98C379;">The</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">CXX</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">compiler</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">identification</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">is</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">GNU</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">9.3.0</span></span>
<span class="line"><span style="color:#ABB2BF;">-- </span><span style="color:#98C379;">Check</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">for</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">working</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">C</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">compiler:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/bin/cc</span></span>
<span class="line"><span style="color:#ABB2BF;">-- </span><span style="color:#98C379;">Check</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">for</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">working</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">C</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">compiler:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/bin/cc</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">works</span></span>
<span class="line"><span style="color:#ABB2BF;">-- </span><span style="color:#98C379;">Detecting</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">C</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">compiler</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">ABI</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">info</span></span>
<span class="line"><span style="color:#ABB2BF;">-- </span><span style="color:#98C379;">Detecting</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">C</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">compiler</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">ABI</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">info</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">done</span></span>
<span class="line"><span style="color:#ABB2BF;">-- </span><span style="color:#98C379;">Detecting</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">C</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">compile</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">features</span></span>
<span class="line"><span style="color:#ABB2BF;">-- </span><span style="color:#98C379;">Detecting</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">C</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">compile</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">features</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">done</span></span>
<span class="line"><span style="color:#ABB2BF;">-- </span><span style="color:#98C379;">Check</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">for</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">working</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">CXX</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">compiler:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/bin/c++</span></span>
<span class="line"><span style="color:#ABB2BF;">-- </span><span style="color:#98C379;">Check</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">for</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">working</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">CXX</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">compiler:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/usr/bin/c++</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">works</span></span>
<span class="line"><span style="color:#ABB2BF;">-- </span><span style="color:#98C379;">Detecting</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">CXX</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">compiler</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">ABI</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">info</span></span>
<span class="line"><span style="color:#ABB2BF;">-- </span><span style="color:#98C379;">Detecting</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">CXX</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">compiler</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">ABI</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">info</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">done</span></span>
<span class="line"><span style="color:#ABB2BF;">-- </span><span style="color:#98C379;">Detecting</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">CXX</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">compile</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">features</span></span>
<span class="line"><span style="color:#ABB2BF;">-- </span><span style="color:#98C379;">Detecting</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">CXX</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">compile</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">features</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">done</span></span>
<span class="line"><span style="color:#ABB2BF;">-- </span><span style="color:#98C379;">Configuring</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">done</span></span>
<span class="line"><span style="color:#ABB2BF;">-- </span><span style="color:#98C379;">Generating</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">done</span></span>
<span class="line"><span style="color:#ABB2BF;">-- </span><span style="color:#98C379;">Build</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">files</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">have</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">been</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">written</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">to:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">.../Step0/build</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>这时可以发现 <code>build</code> 目录下生成了 Makefile：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">$ </span><span style="color:#98C379;">ls</span></span>
<span class="line"><span style="color:#ABB2BF;">CMakeCache.txt  </span><span style="color:#98C379;">CMakeFiles</span><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">Makefile</span><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">cmake_install.cmake</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>内容好长，我也没太看懂，直接 <code>make</code>：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">$ </span><span style="color:#98C379;">make</span></span>
<span class="line"><span style="color:#ABB2BF;">Scanning </span><span style="color:#98C379;">dependencies</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">of</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">target</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">Test</span></span>
<span class="line"><span style="color:#ABB2BF;">[ </span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;">%] Building CXX object CMakeFiles/Test.dir/tutorial.cxx.o</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">%] Linking CXX executable Test</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">%] Built target Test</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>发现多出了可执行文件 <code>Test</code>，运行一下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">$ </span><span style="color:#98C379;">./Test</span></span>
<span class="line"><span style="color:#ABB2BF;">Usage: </span><span style="color:#98C379;">./Test</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">number</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">$ </span><span style="color:#98C379;">./Test</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">49</span></span>
<span class="line"><span style="color:#ABB2BF;">The </span><span style="color:#98C379;">square</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">root</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">of</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">49</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">is</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">7</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="为项目添加版本号和可配置的头文件" tabindex="-1">为项目添加版本号和可配置的头文件 <a class="header-anchor" href="#为项目添加版本号和可配置的头文件" aria-label="Permalink to &quot;为项目添加版本号和可配置的头文件&quot;">​</a></h3><p>修改 <code>CMakeLists.txt</code> 如下：</p><div class="language-cmake line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># CMake 最低版本要求</span></span>
<span class="line"><span style="color:#C678DD;">cmake_minimum_required</span><span style="color:#ABB2BF;">(VERSION 3.10)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 设置项目名称和版本</span></span>
<span class="line"><span style="color:#C678DD;">project</span><span style="color:#ABB2BF;">(Tutorial VERSION 1.0)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 添加可执行文件</span></span>
<span class="line"><span style="color:#C678DD;">add_executable</span><span style="color:#ABB2BF;">(Tutorial tutorial.cxx)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 配置文件，用于将后者的内容替换为前者</span></span>
<span class="line"><span style="color:#C678DD;">configure_file</span><span style="color:#ABB2BF;">(TutorialConfig.h.in TutorialConfig.h)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 固定写法</span></span>
<span class="line"><span style="color:#C678DD;">target_include_directories</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">\${PROJECT_NAME}</span><span style="color:#ABB2BF;"> PUBLIC </span><span style="color:#98C379;">&quot;\${PROJECT_BINARY_DIR}&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 指定 C++ 标准</span></span>
<span class="line"><span style="color:#C678DD;">set</span><span style="color:#ABB2BF;">(CMAKE_CXX_STANDARD 17)</span></span>
<span class="line"><span style="color:#C678DD;">set</span><span style="color:#ABB2BF;">(CMAKE_CXX_STANDARD_REQUIRED </span><span style="color:#C678DD;">True</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>在目录下添加头文件 <code>TutorialConfig.h.in</code>：</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// Tutorial 的配置选项和设置</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Tutorial_VERSION_MAJOR</span><span style="color:#ABB2BF;"> @Tutorial_VERSION_MAJOR@</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Tutorial_VERSION_MINOR</span><span style="color:#ABB2BF;"> @Tutorial_VERSION_MINOR@</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>其中以 <code>@</code> 开头和结尾的宏将会被 camke 替换为对应的版本。</p><p>修改 <code>tutorial.cxx</code> 并让其包含头文件：</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// A simple program that computes the square root of a number</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;cmath&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;TutorialConfig.h&quot;</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">argc</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">argv</span><span style="color:#ABB2BF;">[]) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (argc </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        std::cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">argv</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot; Version &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> Tutorial_VERSION_MAJOR </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;.&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">                  </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> Tutorial_VERSION_MINOR </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">        std::cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Usage: &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">argv</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot; number&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> inputValue </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">atof</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">argv</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">double</span><span style="color:#ABB2BF;"> outputValue </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sqrt</span><span style="color:#ABB2BF;">(inputValue);</span></span>
<span class="line"><span style="color:#ABB2BF;">    std::cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;The square root of &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> inputValue </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot; is &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> outputValue </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>重新操作一番后执行：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">$ </span><span style="color:#98C379;">mkdir</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">build</span></span>
<span class="line"><span style="color:#ABB2BF;">$ </span><span style="color:#98C379;">cmake</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-S</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">.</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-B</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">build</span></span>
<span class="line"><span style="color:#ABB2BF;">$ </span><span style="color:#98C379;">cd</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">build</span></span>
<span class="line"><span style="color:#ABB2BF;">$ </span><span style="color:#98C379;">make</span></span>
<span class="line"><span style="color:#ABB2BF;">$ </span><span style="color:#98C379;">./Tutorial</span></span>
<span class="line"><span style="color:#56B6C2;">.</span><span style="color:#ABB2BF;">/Tutorial </span><span style="color:#98C379;">Version</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1.0</span></span>
<span class="line"><span style="color:#ABB2BF;">Usage: </span><span style="color:#98C379;">./Tutorial</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">number</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>发现多出了一行版本信息，同时在 <code>build</code> 目录下也多出了 CMake 为我们自动生成的 <code>TutorialConfig.h</code> 文件同时并作了替换：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">$ </span><span style="color:#98C379;">ls</span></span>
<span class="line"><span style="color:#ABB2BF;">CMakeCache.txt  </span><span style="color:#98C379;">CMakeFiles</span><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">Makefile</span><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">TutorialConfig.h</span><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">cmake_install.cmake</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">$ </span><span style="color:#98C379;">cat</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">TutorialConfig.h</span></span>
<span class="line"><span style="color:#ABB2BF;">// </span><span style="color:#98C379;">Tutorial</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">的配置选项和设置</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#define Tutorial_VERSION_MAJOR 1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#define Tutorial_VERSION_MINOR 0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="为工程添加链接库" tabindex="-1">为工程添加链接库 <a class="header-anchor" href="#为工程添加链接库" aria-label="Permalink to &quot;为工程添加链接库&quot;">​</a></h3><h4 id="什么是链接库" tabindex="-1">什么是链接库 <a class="header-anchor" href="#什么是链接库" aria-label="Permalink to &quot;什么是链接库&quot;">​</a></h4><p>链接库（下面简称库）分为静态库和动态库。</p><h4 id="静态库" tabindex="-1">静态库 <a class="header-anchor" href="#静态库" aria-label="Permalink to &quot;静态库&quot;">​</a></h4><p>静态库是一些目标文件（<code>.o</code> 文件）的集合，在 Windows 中通常后缀为 <code>.lib</code>，Linux 中为 <code>.a</code>。静态库在链接时会直接把里面的函数代码全部链接到可执行文件中，便于程序的移植，但是也浪费了空间和资源。例如，当多个程序都调用相同函数时，内存中就会存在这个函数的多个拷贝。此外，当静态库变动时，需要链接到库的程序需要重新进行编译，小小的改动可能就要浪费很多时间。因此，静态库的使用不如动态库来得方便。</p><h4 id="动态库" tabindex="-1">动态库 <a class="header-anchor" href="#动态库" aria-label="Permalink to &quot;动态库&quot;">​</a></h4><p>在 Windows 中为 <code>.dll</code>，Linux 中为 <code>.so</code>（例如 LabS 中要用到的 boost 装上以后就是 .so 文件）。动态库在程序编译时<strong>并不会被链接到目标代码</strong>中**，而是在程序运行时才被载入。<strong>不同的应用程序如果调用相同的库，那么在内存里只需要有一份该共享库的实例</strong>，规避了空间浪费问题，也解决了静态库对程序的更新、部署和发布页带来的麻烦。用户只需要更新动态库即可，**增量更新。</p><h4 id="如何添加库" tabindex="-1">如何添加库 <a class="header-anchor" href="#如何添加库" aria-label="Permalink to &quot;如何添加库&quot;">​</a></h4><p>这里以静态库为例，动态库也是类似的。</p><p>首先新建子文件夹 <code>Adder</code>，里面包含 <code>adder.cpp</code> 及 <code>adder.h</code>，用于计算两个整数的和。</p><p><code>adder.cpp</code>：</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;adder.h&quot;</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> a </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> b;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>adder.h</code>：</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>并在该目录中创建 <code>CMakeLists.txt</code>：</p><div class="language-cmake line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 指定库名以及编译库所需要的依赖文件</span></span>
<span class="line"><span style="color:#C678DD;">add_library</span><span style="color:#ABB2BF;">(adder adder.cpp adder.h)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>修改父文件夹的 <code>CMakeLists.txt</code></p><div class="language-cmake line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmake</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># CMake 最低版本要求</span></span>
<span class="line"><span style="color:#C678DD;">cmake_minimum_required</span><span style="color:#ABB2BF;">(VERSION 3.10)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 设置项目名称和版本</span></span>
<span class="line"><span style="color:#C678DD;">project</span><span style="color:#ABB2BF;">(Tutorial VERSION 1.0)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 添加可执行文件</span></span>
<span class="line"><span style="color:#C678DD;">add_executable</span><span style="color:#ABB2BF;">(Tutorial tutorial.cxx)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 配置文件，用于将后者的内容替换为前者</span></span>
<span class="line"><span style="color:#C678DD;">configure_file</span><span style="color:#ABB2BF;">(TutorialConfig.h.in TutorialConfig.h)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 这里加上了 Adder，固定写法</span></span>
<span class="line"><span style="color:#C678DD;">target_include_directories</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">\${PROJECT_NAME}</span><span style="color:#ABB2BF;"> PUBLIC </span><span style="color:#98C379;">&quot;\${PROJECT_BINARY_DIR}&quot;</span><span style="color:#ABB2BF;"> Adder)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 添加子目录，这时会把该子目录编译成库</span></span>
<span class="line"><span style="color:#C678DD;">add_subdirectory</span><span style="color:#ABB2BF;">(Adder)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 指定当CMake从那里寻找我们需要链接的库</span></span>
<span class="line"><span style="color:#ABB2BF;">target_link_directories(</span><span style="color:#C678DD;">\${PROJECT_NAME}</span><span style="color:#ABB2BF;"> PUBLIC Adder)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 将库链接到程序里</span></span>
<span class="line"><span style="color:#C678DD;">target_link_libraries</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">\${PROJECT_NAME}</span><span style="color:#ABB2BF;"> adder)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 指定 C++ 标准，set 用来对变量复制</span></span>
<span class="line"><span style="color:#C678DD;">set</span><span style="color:#ABB2BF;">(CMAKE_CXX_STANDARD 17)</span></span>
<span class="line"><span style="color:#C678DD;">set</span><span style="color:#ABB2BF;">(CMAKE_CXX_STANDARD_REQUIRED </span><span style="color:#C678DD;">True</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p><code>tutorial.cxx</code>：</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// A simple program that computes the square root of a number</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;adder.h&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&lt;iostream&gt;</span></span>
<span class="line"><span style="color:#C678DD;">#include</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;TutorialConfig.h&quot;</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">argc</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">argv</span><span style="color:#ABB2BF;">[]) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (argc </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        std::cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">argv</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot; Version &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> Tutorial_VERSION_MAJOR </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;.&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">                  </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> Tutorial_VERSION_MINOR </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">        std::cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Usage: &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">argv</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot; number1 number2&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">atof</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">argv</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> b </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">atof</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">argv</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> outputValue </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(a, b);</span></span>
<span class="line"><span style="color:#ABB2BF;">    std::cout </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;The sum of &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> a </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot; and &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> b </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot; is &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> outputValue </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>注意到这里可以直接 <code>#include &lt;adder.h&gt;</code> 因为 adder 已经被我们配置成了库加到 <code>CMakeLists.txt</code> 中。</p><p>之后编译运行：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">$ </span><span style="color:#98C379;">./Tutorial</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span></span>
<span class="line"><span style="color:#ABB2BF;">The </span><span style="color:#98C379;">sum</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">of</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">and</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">is</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>同时可以在 <code>build/Adder</code> 目录下找到 <code>libadder.a</code>，这便是 adder 编译成的链接文件。</p><h2 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-label="Permalink to &quot;参考文档&quot;">​</a></h2><p><a href="https://zhuanlan.zhihu.com/p/47390641" target="_blank" rel="noreferrer">Makefile 由浅入深--教程、干货 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/106777805" target="_blank" rel="noreferrer">C 程序的编译过程 - 知乎 (zhihu.com)</a></p><p><a href="http://c.biancheng.net/makefile/" target="_blank" rel="noreferrer">Makefile 教程：Makefile 文件编写 1 天入门 (biancheng.net)</a></p><p><a href="https://www.jianshu.com/p/ff0e0e26c47a" target="_blank" rel="noreferrer">Makefile 简易教程 - 简书 (jianshu.com)</a></p><p><a href="https://www.zhihu.com/question/20484931" target="_blank" rel="noreferrer">Linux 中的动态链接库和静态链接库是干什么的？ - 知乎 (zhihu.com)</a></p><p><a href="https://cmake.org/cmake/help/latest/guide/tutorial/index.html" target="_blank" rel="noreferrer">CMake 官方教程</a></p><p><a href="https://zhuanlan.zhihu.com/p/119426899" target="_blank" rel="noreferrer">CMake 教程（一） - 知乎 (zhihu.com)</a></p>`,129),o=[e];function r(t,c,B,i,y,C){return a(),n("div",null,o)}const u=s(p,[["render",r]]);export{d as __pageData,u as default};
