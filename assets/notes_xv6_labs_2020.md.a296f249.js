import{_ as s,o as n,c as a,V as l}from"./chunks/framework.e802ca17.js";const b=JSON.parse('{"title":"xv6 labs 2020 笔记","description":"","frontmatter":{},"headers":[],"relativePath":"notes/xv6_labs_2020.md","filePath":"notes/xv6_labs_2020.md","lastUpdated":1685640642000}'),p={name:"notes/xv6_labs_2020.md"},o=l(`<h1 id="xv6-labs-2020-笔记" tabindex="-1">xv6 labs 2020 笔记 <a class="header-anchor" href="#xv6-labs-2020-笔记" aria-label="Permalink to &quot;xv6 labs 2020 笔记&quot;">​</a></h1><h2 id="lab-util" tabindex="-1">Lab Util <a class="header-anchor" href="#lab-util" aria-label="Permalink to &quot;Lab Util&quot;">​</a></h2><p>这个实验主要就是调 syscall 来写用户态程序，所有程序后面都要 <code>exit(0)</code> 来返回到 shell。</p><p>除了 <code>primes</code> 都比较简单，只讲 <code>primes</code>。</p><p>根据 <a href="https://swtch.com/~rsc/thread/sieve.gif" target="_blank" rel="noreferrer">示意图</a>，思路应该是主进程把所有数都发到下一个进程，之后每个进程判断输入是否只有一个，如果不是就再 <code>fork</code> 新进程，把筛过的数继续往后发。</p><p>主函数：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">fd</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#61AFEF;">Pipe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fd</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> pid </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fork</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (pid </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">primes</span><span style="color:#ABB2BF;">(fd);</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fd</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> i </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">; i </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">36</span><span style="color:#ABB2BF;">; </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">i) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">write</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fd</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">], </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">i, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fd</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">wait</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">NULL</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>接下来编写每个进程的行为 <code>primes</code>，按照上面的描述，容易想到使用递归来解决，因为迭代不知道要进行多少次循环，会带来困难。</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">primes</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">fd</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fd</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]);</span><span style="color:#7F848E;font-style:italic;"> // 父进程已经用了 fd 的写端口，这里 fd 只用来读</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> prime </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // 第一个读到的一定是质数，之后读到的，如果不是这个数的倍数，发往下一个进程</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">read</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fd</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">], </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">prime, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">fprintf</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;prime </span><span style="color:#D19A66;">%d</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, prime);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">read</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fd</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">], </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">p, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) {</span><span style="color:#7F848E;font-style:italic;"> // 没有下一个数，不需要再创建子进程，递归终止</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fd</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">exit</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">new_fd</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">];</span><span style="color:#7F848E;font-style:italic;"> // new_fd 用来给子进程传</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">Pipe</span><span style="color:#ABB2BF;">(new_fd);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> pid </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fork</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (pid </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">primes</span><span style="color:#ABB2BF;">(new_fd);</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">new_fd</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (p </span><span style="color:#C678DD;">%</span><span style="color:#ABB2BF;"> prime </span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#61AFEF;">write</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">new_fd</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">], </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">p, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">read</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fd</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">], </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">p, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) {</span><span style="color:#7F848E;font-style:italic;"> // 从父进程读完，可以结束</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fd</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">new_fd</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#61AFEF;">wait</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">NULL</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span><span style="color:#61AFEF;">exit</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p>这里还需要注意，因为 <code>int</code> 是四字节，代码里的 <code>prime</code> 和 <code>p</code> 都要初始化。也可以改成读或者写四字节，或者使用 <code>char</code> 代替 <code>int</code> 来避免错误。</p><h2 id="lab-syscall" tabindex="-1">Lab Syscall <a class="header-anchor" href="#lab-syscall" aria-label="Permalink to &quot;Lab Syscall&quot;">​</a></h2><p>本次实验添加两个 syscall，<code>trace</code> 和 <code>sysinfo</code>。</p><p>添加 syscall 的步骤为</p><ol><li><p>到 <code>user/user.h</code> 里添加 syscall 的原型，这里参数和返回值都可以自定义，例如对于 <code>trace</code>，应是接收一个整形参数，标志需要记录的 syscall，执行正常返回 0，否则返回 -1。</p></li><li><p><code>user/usys.pl</code> 里添加对应的 entry，这将使得调用 syscall 时，寄存器 <code>a7</code> 被载入对应 <code>SYS_\${name}</code> 的值，然后通过 <code>ecall</code> 调用对应 syscall。</p></li><li><p>在 <code>kernel/syscall.h</code> 里添加对应的 syscall number，也就是 <code>a7</code> 具体被载入的值。</p></li><li><p>在 <code>kernel/sysproc.c</code> 里添加对应的函数，这里的函数一定都没有参数，并且返回值类型为 <code>uint64</code>，其参数根据其类型通过 <code>argint</code>、<code>argaddr</code>、<code>argfd</code> 来获取。</p></li><li><p>在 <code>kernel/syscalls.c</code> 里增加 syscall number 和调用函数的 mapping。</p></li></ol><h3 id="trace" tabindex="-1">Trace <a class="header-anchor" href="#trace" aria-label="Permalink to &quot;Trace&quot;">​</a></h3><p>为了方便 trace 打印 syscall 的名字，在 <code>kernel/syscalls.c</code> 里需要加上 syscall number 到 syscall name 的 mapping。</p><p><code>trace</code> 在当前进程里记录下调用的参数：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">uint64 </span><span style="color:#61AFEF;">sys_trace</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> mask;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">argint</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">mask) </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">struct</span><span style="color:#ABB2BF;"> proc </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">myproc</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">mask</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> mask;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>调用 <code>syscall()</code> 时检查当前的 syscall number 和该参数的逻辑与，如果非 0，打印 trace 信息：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">syscall</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> num;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">struct</span><span style="color:#ABB2BF;"> proc </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">myproc</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  num </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E5C07B;">trapframe</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">a7</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(num </span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> num </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">NELEM</span><span style="color:#ABB2BF;">(syscalls) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">syscalls</span><span style="color:#ABB2BF;">[num]) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E5C07B;">trapframe</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">a0</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">syscalls</span><span style="color:#ABB2BF;">[num]();</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> ((</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">mask</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">&lt;&lt;</span><span style="color:#ABB2BF;"> num)) </span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;</span><span style="color:#D19A66;">%d</span><span style="color:#98C379;">: syscall </span><span style="color:#D19A66;">%s</span><span style="color:#98C379;"> -&gt; </span><span style="color:#D19A66;">%d</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">pid</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">syscall_names</span><span style="color:#ABB2BF;">[num], </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E5C07B;">trapframe</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">a0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;</span><span style="color:#D19A66;">%d</span><span style="color:#98C379;"> </span><span style="color:#D19A66;">%s</span><span style="color:#98C379;">: unknown sys call </span><span style="color:#D19A66;">%d</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">pid</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">, num);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E5C07B;">trapframe</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">a0</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="sysinfo" tabindex="-1">Sysinfo <a class="header-anchor" href="#sysinfo" aria-label="Permalink to &quot;Sysinfo&quot;">​</a></h3><p>获取 <code>struct sysinfo</code> 的对应信息，然后通过 <code>copyout</code> 从内核空间复制到用户空间：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">uint64</span></span>
<span class="line"><span style="color:#61AFEF;">sys_sysinfo</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">struct</span><span style="color:#ABB2BF;"> proc </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">myproc</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">struct</span><span style="color:#ABB2BF;"> sysinfo info;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  uint64 addr;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">argaddr</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">addr) </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">info</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">freemem</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">freemem</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">info</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">nproc</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">numproc</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">copyout</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">pagetable</span><span style="color:#ABB2BF;">, addr, (</span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">info, </span><span style="color:#C678DD;">sizeof</span><span style="color:#ABB2BF;">(info)) </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p><code>freemem</code> 在 <code>kernel/kalloc.c</code> 里实现，只要用一个全局计数器记录空页数，每次 <code>kfree</code> 增加一页，<code>kalloc</code> 减少一页，之后乘以每页的大小 <code>PGSIZE</code> 即可。</p><p><code>numproc</code> 在 <code>kernel/proc.c</code> 里实现，最多也就 <code>NPROC</code> 个，遍历整个 <code>proc</code> 数组，不在 <code>UNUSED</code> 状态就算一个。</p><h2 id="lab-pagetable" tabindex="-1">Lab Pagetable <a class="header-anchor" href="#lab-pagetable" aria-label="Permalink to &quot;Lab Pagetable&quot;">​</a></h2><h3 id="print-a-page-table" tabindex="-1">Print a page table <a class="header-anchor" href="#print-a-page-table" aria-label="Permalink to &quot;Print a page table&quot;">​</a></h3><p>仿照 <code>freewalk</code> 即可，可以选择递归，这需要一个 helper function，添加一个参数记录递归层数以在 <code>printf</code> 中缩进。这里因为只有三层，我暴力展开了三重循环：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">vmprint</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">pagetable_t</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">pgtbl</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;page table </span><span style="color:#D19A66;">%p</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, pgtbl);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> i </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; i </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> PGSIZE </span><span style="color:#C678DD;">/</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">; </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">i) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    uint64 pte1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">pgtbl</span><span style="color:#ABB2BF;">[i];</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> ((pte1 </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> PTE_V) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> (pte1 </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> (PTE_R </span><span style="color:#C678DD;">|</span><span style="color:#ABB2BF;"> PTE_W </span><span style="color:#C678DD;">|</span><span style="color:#ABB2BF;"> PTE_X)) </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      uint64 pa1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">PTE2PA</span><span style="color:#ABB2BF;">(pte1);</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;..</span><span style="color:#D19A66;">%d</span><span style="color:#98C379;">: pte </span><span style="color:#D19A66;">%p</span><span style="color:#98C379;"> pa </span><span style="color:#D19A66;">%p</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, i, pte1, pa1);</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> j </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; j </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> PGSIZE </span><span style="color:#C678DD;">/</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">; </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">j) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        uint64 pte2 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> ((</span><span style="color:#56B6C2;">pagetable_t</span><span style="color:#ABB2BF;">)pa1)[j];</span></span>
<span class="line"><span style="color:#ABB2BF;">				</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> ((pte2 </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> PTE_V) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> (pte2 </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> (PTE_R </span><span style="color:#C678DD;">|</span><span style="color:#ABB2BF;"> PTE_W </span><span style="color:#C678DD;">|</span><span style="color:#ABB2BF;"> PTE_X)) </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">					uint64 pa2 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">PTE2PA</span><span style="color:#ABB2BF;">(pte2);</span></span>
<span class="line"><span style="color:#ABB2BF;">					</span><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.. ..</span><span style="color:#D19A66;">%d</span><span style="color:#98C379;">: pte </span><span style="color:#D19A66;">%p</span><span style="color:#98C379;"> pa </span><span style="color:#D19A66;">%p</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, j, pte2, pa2);</span></span>
<span class="line"><span style="color:#ABB2BF;">					</span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> k </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; k </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> PGSIZE </span><span style="color:#C678DD;">/</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">; </span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">k) {</span></span>
<span class="line"><span style="color:#ABB2BF;">						uint64 pte3 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> ((</span><span style="color:#56B6C2;">pagetable_t</span><span style="color:#ABB2BF;">)pa2)[k];</span></span>
<span class="line"><span style="color:#ABB2BF;">						</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (pte3 </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> PTE_V) {</span></span>
<span class="line"><span style="color:#ABB2BF;">							uint64 pa3 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">PTE2PA</span><span style="color:#ABB2BF;">(pte3);</span></span>
<span class="line"><span style="color:#ABB2BF;">							</span><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.. .. ..</span><span style="color:#D19A66;">%d</span><span style="color:#98C379;">: pte </span><span style="color:#D19A66;">%p</span><span style="color:#98C379;"> pa </span><span style="color:#D19A66;">%p</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, k, pte3, pa3);</span></span>
<span class="line"><span style="color:#ABB2BF;">						}</span></span>
<span class="line"><span style="color:#ABB2BF;">					}</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>注意 <code>PTE2PA</code> 等宏的使用，因为索引是 PPN 加上 12 位 offset（前两层都是 0），并且前两层 <code> pte &amp; (PTE_R | PTE_W | PTE_X)</code> 应该都是 0，最后一层则只要求 Valid。</p><p>下面两问比较困难，一出错就是各种 panic，debug 很痛苦。</p><h3 id="a-kernel-page-table-per-process" tabindex="-1">A kernel page table per process <a class="header-anchor" href="#a-kernel-page-table-per-process" aria-label="Permalink to &quot;A kernel page table per process&quot;">​</a></h3><p>这问主要是为下一问做准备，因为 xv6 原本的实现中只有一个全局内核页表，内核为了解析用户地址，需要传入用户页表，并通过软件模拟页表查询来获取对应的物理地址，例如在 <code>copyin</code> 中，需要通过 <code>walkaddr</code> 在页表中找到对应的物理地址，但如果为每个进程维护对应的 kernel page table，并在进程进入内核时，对应的内核页表被写入 <code>satp</code> 寄存器，硬件就可以完成虚拟地址的解析，并且还能利用 TLB 进行加速查找。</p><p>首先，原本的 <code>kvminit</code> 只要创建一个内核页表，现在抽象出一个函数专门用来创建内核页表：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#56B6C2;">pagetable_t</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">kpgtbl_create</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#56B6C2;">pagetable_t</span><span style="color:#ABB2BF;"> pagetable </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">vmcreate</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// uart registers</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">kvmmap</span><span style="color:#ABB2BF;">(pagetable, UART0, UART0, PGSIZE, PTE_R </span><span style="color:#C678DD;">|</span><span style="color:#ABB2BF;"> PTE_W);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// virtio mmio disk interface</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">kvmmap</span><span style="color:#ABB2BF;">(pagetable, VIRTIO0, VIRTIO0, PGSIZE, PTE_R </span><span style="color:#C678DD;">|</span><span style="color:#ABB2BF;"> PTE_W);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// PLIC</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">kvmmap</span><span style="color:#ABB2BF;">(pagetable, PLIC, PLIC, </span><span style="color:#E06C75;">0x</span><span style="color:#D19A66;">400000</span><span style="color:#ABB2BF;">, PTE_R </span><span style="color:#C678DD;">|</span><span style="color:#ABB2BF;"> PTE_W);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// map kernel text executable and read-only.</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">kvmmap</span><span style="color:#ABB2BF;">(pagetable, KERNBASE, KERNBASE, (uint64)etext</span><span style="color:#C678DD;">-</span><span style="color:#ABB2BF;">KERNBASE, PTE_R </span><span style="color:#C678DD;">|</span><span style="color:#ABB2BF;"> PTE_X);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// map kernel data and the physical RAM we&#39;ll make use of.</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">kvmmap</span><span style="color:#ABB2BF;">(pagetable, (uint64)etext, (uint64)etext, PHYSTOP</span><span style="color:#C678DD;">-</span><span style="color:#ABB2BF;">(uint64)etext, PTE_R </span><span style="color:#C678DD;">|</span><span style="color:#ABB2BF;"> PTE_W);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// map the trampoline for trap entry/exit to</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// the highest virtual address in the kernel.</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">kvmmap</span><span style="color:#ABB2BF;">(pagetable, TRAMPOLINE, (uint64)trampoline, PGSIZE, PTE_R </span><span style="color:#C678DD;">|</span><span style="color:#ABB2BF;"> PTE_X);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> pagetable;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>这对比 <code>kvminit</code>，少了 <code>CLINT</code> 的 mapping，因为在第三问中，<code>0 ~ PLIC</code> 这一地址空间是给用户页表的，然而 <code>CLINT</code> 比它小，由于这个 mapping 仅在启动时 enable interrupt 有用，因此只添加在 <code>kernel_pagetable</code> 里：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">kvminit</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  kernel_pagetable </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">kpgtbl_create</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">kvmmap</span><span style="color:#ABB2BF;">(kernel_pagetable, CLINT, CLINT, </span><span style="color:#E06C75;">0x</span><span style="color:#D19A66;">10000</span><span style="color:#ABB2BF;">, PTE_R </span><span style="color:#C678DD;">|</span><span style="color:#ABB2BF;"> PTE_W);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这里为 <code>kvmmap</code> 添加了额外的参数，以对不同进程的内核页表添加 mapping。</p><p>然后在 <code>struct proc</code> 里添加一个 <code>kpagetable</code> 域。</p><p>在 <code>allocproc</code> 函数中，为进程分配 <code>kpagetable</code>，此外，因为这个 <code>kpagetable</code> 需要包含这个进程对应内核栈的 mapping，因此原本在 <code>procinit</code> 里统一分配到内核栈也改到 <code>allocproc</code> 分配：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">struct</span><span style="color:#ABB2BF;"> proc</span><span style="color:#C678DD;">*</span></span>
<span class="line"><span style="color:#61AFEF;">allocproc</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// An empty user page table.</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">pagetable</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">proc_pagetable</span><span style="color:#ABB2BF;">(p);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">pagetable</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">freeproc</span><span style="color:#ABB2BF;">(p);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">release</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">lock</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">kpagetable</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">kpgtbl_create</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">pa </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">kalloc</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(pa </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">panic</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;kalloc&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  uint64 va </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">KSTACK</span><span style="color:#ABB2BF;">((</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;">)(p </span><span style="color:#C678DD;">-</span><span style="color:#ABB2BF;"> proc));</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">kstack</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> va;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// Each process&#39;s kernel page table has a mapping for that process&#39;s kernel stack</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">kvmmap</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">kpagetable</span><span style="color:#ABB2BF;">, va, (uint64)pa, PGSIZE, PTE_R </span><span style="color:#C678DD;">|</span><span style="color:#ABB2BF;"> PTE_W);</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>这里 <code>va</code> 也可以用 <code>KSTACK(0)</code>，因为每个进程页表里就一个内核栈。</p><p>相应的，<code>freeproc</code> 里要对进程的内核页表和内核栈进行释放。</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">void</span></span>
<span class="line"><span style="color:#61AFEF;">freeproc</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">struct</span><span style="color:#E06C75;"> proc </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">p</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">kpagetable</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">kstack</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    uint64 pa </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">kvmpa</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">kpagetable</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">kstack</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">kfree</span><span style="color:#ABB2BF;">((</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">)pa);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">proc_freekpagetable</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">kpagetable</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">kstack</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>这里 <code>proc_freekpagetable</code> 和 <code>proc_freepagetable</code> 的区别在于前者不释放三级页表对应的物理空间，那么编写起来和 <code>freewalk</code> 没有区别，只是不需要在发现 leaf 没有被 free 时 panic。</p><p>最后，在调度器 <code>scheduler</code> 里，在进程切换时需要把对应的内核页表写到 <code>satp</code> 寄存器，进程运行结束后再换回 <code>kernel_pagetable</code>：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(p</span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;">state </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> RUNNABLE) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> RUNNING;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">c</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">proc</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> p;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">w_satp</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">MAKE_SATP</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">kpagetable</span><span style="color:#ABB2BF;">));</span><span style="color:#7F848E;font-style:italic;"> // 写入 satp，之后 flush TLB</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">sfence_vma</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">swtch</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#E5C07B;">c</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">&amp;</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">c</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">proc</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 换回 kernel_pagetable</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">kvminithart</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  found </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>在写完后运行，发现报错 <code>panic: kvmpa</code>，用 GDB 调试，发现 <code>kvmpa</code> 试图在 <code>kernel_pagetable</code> 里找内核栈的地址。</p><p>于是我想在 <code>allocproc</code> 时把创建的栈也加到 <code>kernel_pagetable</code> 里，这时错误果然已经消失，但是换成了 <code>panic: remap</code>，因为进程会被 free，在用到之前被释放的进程时，它对应的内核栈已经 map 过了，需要在 <code>freeproc</code> 里对应进行 <code>unmap</code>。</p><p>更好的做法是把 <code>kernel/vertio_disk.c</code> 里 <code>disk.desc[idx[0]].addr = (uint64) kvmpa((uint64) &amp;buf0);</code> 改成 <code>disk.desc[idx[0]].addr = (uint64) kvmpa(myproc()-&gt;kpagetable, (uint64) &amp;buf0);</code>（当然要为 <code>kvmpa</code> 添加对应的参数）</p><h3 id="simplify-copyin-copyinstr" tabindex="-1">Simplify copyin/copyinstr <a class="header-anchor" href="#simplify-copyin-copyinstr" aria-label="Permalink to &quot;Simplify copyin/copyinstr&quot;">​</a></h3><p>首先把 <code>copyin</code> 和 <code>copyinstr</code> 改成调用 <code>vmcopy.c</code> 里两个对应的函数：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">copyin</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">pagetable_t</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">pagetable</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">char</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">dst</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> uint64 </span><span style="color:#E06C75;font-style:italic;">srcva</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> uint64 </span><span style="color:#E06C75;font-style:italic;">len</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">copyin_new</span><span style="color:#ABB2BF;">(pagetable, dst, srcva, len);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">copyinstr</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">pagetable_t</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">pagetable</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">char</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">dst</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> uint64 </span><span style="color:#E06C75;font-style:italic;">srcva</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> uint64 </span><span style="color:#E06C75;font-style:italic;">max</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">copyinstr_new</span><span style="color:#ABB2BF;">(pagetable, dst, srcva, max);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>接下来，为了硬件能正确的解析用户地址，需要在每个为用户页表添加 mapping 的地方相应的为内核页表也添加这个 mapping。</p><p>实现一个 <code>kvmcopy</code> 函数，用于向内核页表拷贝用户页表：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">kvmcopy</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">pagetable_t</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">pagetable</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#56B6C2;">pagetable_t</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">kpagetable</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> uint64 </span><span style="color:#E06C75;font-style:italic;">start</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> uint64 </span><span style="color:#E06C75;font-style:italic;">end</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  start </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">PGROUNDUP</span><span style="color:#ABB2BF;">(start);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (uint64 i </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> start; i </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> end; i </span><span style="color:#C678DD;">+=</span><span style="color:#ABB2BF;"> PGSIZE) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">pte_t</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">pte </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">walk</span><span style="color:#ABB2BF;">(pagetable, i, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    uint64 pa </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">PTE2PA</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">pte);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> perm </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">PTE_FLAGS</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">pte) </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">~</span><span style="color:#ABB2BF;">PTE_U;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">mappages</span><span style="color:#ABB2BF;">(kpagetable, i, PGSIZE, pa, perm) </span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">uvmunmap</span><span style="color:#ABB2BF;">(kpagetable, start, (i </span><span style="color:#C678DD;">-</span><span style="color:#ABB2BF;"> start) </span><span style="color:#C678DD;">/</span><span style="color:#ABB2BF;"> PGSIZE, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>这和 <code>uvmcopy</code> 基本类似，但由于 <code>uvmcopy</code> 一定是从地址空间 0 开始拷贝，而 <code>kvmcopy</code> 不一定（后面会讲到），所以要一个 <code>start</code> 参数。此外，<code>uvmcopy</code> 会创建新的物理空间，但 <code>kvmcopy</code> 只要让两个页表的虚拟地址指向相同的物理地址就行了，在权限位需要 clear <code>PTU_U</code> 这一位，否则会导致内核模式下无法访问。</p><p>之后就是在改变用户页表的地方做同步，首先是 <code>fork</code>：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">((</span><span style="color:#61AFEF;">uvmcopy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#C678DD;">-&gt;</span><span style="color:#E06C75;font-style:italic;">pagetable</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> np</span><span style="color:#C678DD;">-&gt;</span><span style="color:#E06C75;font-style:italic;">pagetable</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> p</span><span style="color:#C678DD;">-&gt;</span><span style="color:#E06C75;font-style:italic;">sz</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span></span>
<span class="line"><span style="color:#ABB2BF;">     (</span><span style="color:#61AFEF;">kvmcopy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">np</span><span style="color:#C678DD;">-&gt;</span><span style="color:#E06C75;font-style:italic;">pagetable</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> np</span><span style="color:#C678DD;">-&gt;</span><span style="color:#E06C75;font-style:italic;">kpagetable</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> p</span><span style="color:#C678DD;">-&gt;</span><span style="color:#E06C75;font-style:italic;">sz</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">freeproc</span><span style="color:#ABB2BF;">(np);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">release</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#E5C07B;">np</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">lock</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><code>exec</code>：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// Save program name for debugging.</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;">(last</span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;">s</span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;">path; </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">s; s</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">s </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;/&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  last </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> s</span><span style="color:#C678DD;">+</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">safestrcpy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#C678DD;">-&gt;</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> last</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">sizeof</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#C678DD;">-&gt;</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">uvmunmap</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#C678DD;">-&gt;</span><span style="color:#E06C75;font-style:italic;">kpagetable</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#61AFEF;">PGROUNDUP</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldsz</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">/</span><span style="color:#E06C75;"> PGSIZE</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">kvmcopy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pagetable</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> p</span><span style="color:#C678DD;">-&gt;</span><span style="color:#E06C75;font-style:italic;">kpagetable</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> sz</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Commit to the user image.</span></span>
<span class="line"><span style="color:#ABB2BF;">oldpagetable </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> p</span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;">pagetable;</span></span>
<span class="line"><span style="color:#ABB2BF;">p</span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;">pagetable </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> pagetable;</span></span>
<span class="line"><span style="color:#ABB2BF;">p</span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;">sz </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> sz;</span></span>
<span class="line"><span style="color:#ABB2BF;">p</span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;">trapframe</span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;">epc </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> elf.entry;</span><span style="color:#7F848E;font-style:italic;">  // initial program counter = main</span></span>
<span class="line"><span style="color:#ABB2BF;">p</span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;">trapframe</span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;">sp </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> sp;</span><span style="color:#7F848E;font-style:italic;"> // initial stack pointer</span></span>
<span class="line"><span style="color:#61AFEF;">proc_freepagetable</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldpagetable</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> oldsz</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (p</span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;">pid </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">vmprint</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">pagetable</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>因为 <code>exec</code> 直接替换进程的地址空间，因此对应的内核页表需要先清空再复制，防止出现 remap 错误。</p><p><code>growproc</code>：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">uint64 newsz;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">((newsz </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">uvmalloc</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#C678DD;">-&gt;</span><span style="color:#E06C75;font-style:italic;">pagetable</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> sz</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> sz </span><span style="color:#C678DD;">+</span><span style="color:#E06C75;"> n</span><span style="color:#ABB2BF;">)) </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">kvmcopy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#C678DD;">-&gt;</span><span style="color:#E06C75;font-style:italic;">pagetable</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> p</span><span style="color:#C678DD;">-&gt;</span><span style="color:#E06C75;font-style:italic;">kpagetable</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> sz</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> sz </span><span style="color:#C678DD;">+</span><span style="color:#E06C75;"> n</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">uvmdealloc</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">pagetable</span><span style="color:#ABB2BF;">, newsz, sz);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">sz </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> newsz;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>需要注意的是，这里不是从 0 开始 copy，而是从旧的 <code>size</code> 处开始，copy 需要 grow 的大小 <code>n</code>。这也是为什么 <code>kvmcopy</code> 需要增加一个参数。</p><p>最后是 <code>userinit</code>：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">uvminit</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#C678DD;">-&gt;</span><span style="color:#E06C75;font-style:italic;">pagetable</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> initcode</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">sizeof</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">initcode</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">p</span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;">sz </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> PGSIZE;</span></span>
<span class="line"><span style="color:#61AFEF;">kvmcopy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#C678DD;">-&gt;</span><span style="color:#E06C75;font-style:italic;">pagetable</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> p</span><span style="color:#C678DD;">-&gt;</span><span style="color:#E06C75;font-style:italic;">kpagetable</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> p</span><span style="color:#C678DD;">-&gt;</span><span style="color:#E06C75;font-style:italic;">sz</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>此外，因为用户页表还可能会去除一些映射，再新增一个函数 <code>kvmdealloc</code> 在 <code>growproc</code> 里调用：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">uint64 </span><span style="color:#61AFEF;">kvmdealloc</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">pagetable_t</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">pagetable</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> uint64 </span><span style="color:#E06C75;font-style:italic;">oldsz</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> uint64 </span><span style="color:#E06C75;font-style:italic;">newsz</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(newsz </span><span style="color:#C678DD;">&gt;=</span><span style="color:#ABB2BF;"> oldsz)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> oldsz;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">PGROUNDUP</span><span style="color:#ABB2BF;">(newsz) </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">PGROUNDUP</span><span style="color:#ABB2BF;">(oldsz)){</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> npages </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">PGROUNDUP</span><span style="color:#ABB2BF;">(oldsz) </span><span style="color:#C678DD;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">PGROUNDUP</span><span style="color:#ABB2BF;">(newsz)) </span><span style="color:#C678DD;">/</span><span style="color:#ABB2BF;"> PGSIZE;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">uvmunmap</span><span style="color:#ABB2BF;">(pagetable, </span><span style="color:#61AFEF;">PGROUNDUP</span><span style="color:#ABB2BF;">(newsz), npages, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> // 只有这里和 uvm 有区别，并不释放内存</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> newsz;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>最后，为了防止用户使用的地址超过 <code>PLIC</code>，在 <code>uvmalloc</code> 里添加判断：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">PGROUNDDOWN</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newsz</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">&gt;=</span><span style="color:#ABB2BF;"> PLIC) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="lab-traps" tabindex="-1">Lab Traps <a class="header-anchor" href="#lab-traps" aria-label="Permalink to &quot;Lab Traps&quot;">​</a></h2><h3 id="risc-v-assembly" tabindex="-1">RISC-V assembly <a class="header-anchor" href="#risc-v-assembly" aria-label="Permalink to &quot;RISC-V assembly&quot;">​</a></h3><p>本次实验不需要对 RISC-V 汇编有很深入的了解，只需要知道基本的就可以了。</p><blockquote><p>Q: Which registers contain arguments to functions? For example, which register holds 13 in main&#39;s call to printf?</p></blockquote><p>A: 根据 <a href="https://pdos.csail.mit.edu/6.S081/2020/readings/riscv-calling.pdf" target="_blank" rel="noreferrer">Calling convensions</a> 18.2 章，a0-a7 用来存整形参数，fa0-fa7 用来存浮点参数，13 是第三个参数，在 a2 中。</p><blockquote><p>Q: Where is the call to function f in the assembly code for main? Where is the call to g? (Hint: the compiler may inline functions.)</p></blockquote><p>A: 都没有，编译器自动把 g(x) 内联进了 f(x)，f(x) 又被内联进了 main()，f(8) + 1 直接被展开为 12。</p><blockquote><p>Q: At what address is the function printf located?</p></blockquote><p>A: 0x628。</p><blockquote><p>Q: What value is in the register ra just after the jalr to printf in main?</p></blockquote><p>A: 0x38。ra: return address（返回地址），除此之外，还要知道 s0/fp: frame pointer（帧指针）、sp: stack pointer（栈指针）、sepc: supervised exception program counter（中断返回的地址）。</p><blockquote><p>Q: Run the following code.</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">unsigned</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> i </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">0x</span><span style="color:#D19A66;">00646c72</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;H</span><span style="color:#D19A66;">%x</span><span style="color:#98C379;"> Wo</span><span style="color:#D19A66;">%s</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">57616</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;font-style:italic;">i</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>What is the output? If the RISC-V were instead big-endian what would you set i to in order to yield the same output? Would you need to change 57616 to a different value?</p></blockquote><p>A: <code>He110 World</code>。如果是大端设计，i 应该设成 <code>0x726c6400</code>。因为把整数作为字符串打印时，寻址是按字节的，不妨假设地址空间是 00-03，大端和小端都是依次打印 00-03 的字节，说明地址空间应该为 0x72，0x6c，0x64，0x00，拼起来即可。57616 不用变，因为转成 16 进制打印永远是 110。</p><blockquote><p>Q: In the following code, what is going to be printed after &#39;y=&#39;? (note: the answer is not a specific value.) Why does this happen?</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;x=</span><span style="color:#D19A66;">%d</span><span style="color:#98C379;"> y=</span><span style="color:#D19A66;">%d</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></blockquote><p>A: 是个随机值，因为提供的参数不足，会打印调用这个代码时 a2 里面的值。</p><h3 id="backtrace" tabindex="-1">Backtrace <a class="header-anchor" href="#backtrace" aria-label="Permalink to &quot;Backtrace&quot;">​</a></h3><p>参考 <a href="https://pdos.csail.mit.edu/6.828/2020/lec/l-riscv-slides.pdf" target="_blank" rel="noreferrer">lecture notes</a> 里的栈帧图即可，个人感觉应该属于 easy：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">backtrace</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;backtrace:</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  uint64 fp </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">r_fp</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  uint64 top </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">PGROUNDUP</span><span style="color:#ABB2BF;">(fp);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (fp </span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;"> top) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    uint64 ra </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">((uint64 </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">)(fp </span><span style="color:#C678DD;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;</span><span style="color:#D19A66;">%p</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, ra);</span></span>
<span class="line"><span style="color:#ABB2BF;">    fp </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">((uint64 </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">)(fp </span><span style="color:#C678DD;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">16</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="alarm" tabindex="-1">Alarm <a class="header-anchor" href="#alarm" aria-label="Permalink to &quot;Alarm&quot;">​</a></h3><h4 id="test0" tabindex="-1">test0 <a class="header-anchor" href="#test0" aria-label="Permalink to &quot;test0&quot;">​</a></h4><p>难点在于 <code>trap.c</code> 里 <code>usertrap</code> 的修改，为了执行 handler，我一开始的做法是直接通过 <code>walkaddr</code> 在页表里找到地址，然后执行：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">uint64 addr </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">walkaddr</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#C678DD;">-&gt;</span><span style="color:#E06C75;font-style:italic;">pagetable</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> p</span><span style="color:#C678DD;">-&gt;</span><span style="color:#E06C75;font-style:italic;">handler</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">((</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">)()) addr)();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>但会报错 panic: kerneltrap，思考提示里的 &quot;When a trap on the RISC-V returns to user space, what determines the instruction address at which user-space code resumes execution?&quot; 后想出应该修改 trapframe 里的 epc。</p><h4 id="test1" tabindex="-1">test1 <a class="header-anchor" href="#test1" aria-label="Permalink to &quot;test1&quot;">​</a></h4><p>这个测试考察寄存器的保存，因为需要恢复中断前执行位置、栈、栈帧以及寄存器，最简单的做法是直接保存调用 handler 前的整个 trapframe，在 <code>sigreturn</code> 里恢复。我的做法是只保存 <code>pc</code>、<code>ra</code>、<code>sp</code>、<code>s0</code> 和 <code>a0-a7</code>。</p><h4 id="test2" tabindex="-1">test2 <a class="header-anchor" href="#test2" aria-label="Permalink to &quot;test2&quot;">​</a></h4><p>要求不能 re-entrant handler，也即 handler 如果需要较长时间完成，可能会导致上一次还没执行完，就进行了新一次的中断，这会导致死循环，在进程里提供一个标记域标志是否已经在 handler 中即可。</p><h2 id="lab-lazy-page-allocation" tabindex="-1">Lab Lazy Page Allocation <a class="header-anchor" href="#lab-lazy-page-allocation" aria-label="Permalink to &quot;Lab Lazy Page Allocation&quot;">​</a></h2><h2 id="eliminate-allocation-from-sbrk" tabindex="-1">Eliminate allocation from sbrk() <a class="header-anchor" href="#eliminate-allocation-from-sbrk" aria-label="Permalink to &quot;Eliminate allocation from sbrk()&quot;">​</a></h2><p>取消 <code>sbrk</code> 里 <code>growproc</code> 的调用，只改变 <code>p-&gt;sz</code> 即可。</p><p>调用 <code>echo hi</code> 时，进行了如下调用：</p><p><code>sh.c</code> 200 行 <code>malloc</code><code>umalloc.c</code> 87 行 <code>morecore</code><code>umalloc.c</code> 54 行 <code>sbrk</code></p><p>之后由于 <code>fork</code> 后父进程需要调用 <code>wait</code>，发生了如下调用：</p><p><code>trap.c</code> 75 行 <code>syscall</code><code>syscall.c</code> 139 行，调用 <code>sys_wait</code><code>sysproc.c</code> 38 行，调用 <code>wait</code><code>proc.c</code> 429 行，调用 <code>freeproc</code><code>proc.c</code> 143 行，<code>proc_freepagetable</code><code>proc.c</code> 195 行，<code>uvmfree</code><code>vm.c</code> 298 行，<code>uvmunmap</code><code>vm.c</code> 186 行，<code>panic</code></p><p>从而导致发生 panic。</p><h3 id="lazy-allocation" tabindex="-1">Lazy allocation <a class="header-anchor" href="#lazy-allocation" aria-label="Permalink to &quot;Lazy allocation&quot;">​</a></h3><p>这个 Lab 成功做完后觉得自己写的很差，看了网上 [大佬的博客](<a href="https://blog.miigon.net/" target="_blank" rel="noreferrer">Miigon&#39;s blog</a>)，深受启发，又做了部分修改，很推荐看一看。</p><p>这步只要让 <code>echo hi</code> 能工作即可，没什么实际价值，和后面连起来说。</p><p>首先是在 page fault 时分配所需页，需要满足以下条件：</p><ol><li><code>scause</code> 寄存器值为 13 或 15（分别对应读和写）</li><li>地址不超过 <code>p-&gt;sz</code></li><li>访问的不是 stack 下面的 guard page</li></ol><p>其中第三点我一开始试过判断 <code>PTE_U</code> 被 clear 来做：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">uint64 va </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">PGROUNDDOWN</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">stval</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#56B6C2;">pte_t</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">pte </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">walk</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#C678DD;">-&gt;</span><span style="color:#E06C75;font-style:italic;">pagetable</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> va</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (pte </span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">pte </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> PTE_V) </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">pte </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> PTE_U) </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">killed</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // stack overflow</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>尽管正确，但觉得不够优雅，后面换成了和栈指针的距离判断：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">PGROUNDUP</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">stval</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">PGROUNDDOWN</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#C678DD;">-&gt;</span><span style="color:#E06C75;">trapframe</span><span style="color:#C678DD;">-&gt;</span><span style="color:#E06C75;font-style:italic;">sp</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>之后就是做内存分配，一开始我直接写在 <code>trap.c</code> 的 <code>usertrap</code> 函数里，这导致后面处理 syscall 的用户指针未分配时不能复用，又要调用 <code>uvmalloc</code> 并对它进行修改，防止可能中间某段地址 map 过，导致 <code>mappages</code> 里 panic，最后改成在 <code>vm.c</code> 里新增函数：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">lazyalloc</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">pagetable_t</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">pagetable</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> uint64 </span><span style="color:#E06C75;font-style:italic;">va</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">mem </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">kalloc</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(mem </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;"> // kalloc fails, kill process</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">memset</span><span style="color:#ABB2BF;">(mem, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, PGSIZE);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">mappages</span><span style="color:#ABB2BF;">(pagetable, va, PGSIZE, (uint64)mem, PTE_W</span><span style="color:#C678DD;">|</span><span style="color:#ABB2BF;">PTE_X</span><span style="color:#C678DD;">|</span><span style="color:#ABB2BF;">PTE_R</span><span style="color:#C678DD;">|</span><span style="color:#ABB2BF;">PTE_U) </span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">kfree</span><span style="color:#ABB2BF;">(mem);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">uvmdealloc</span><span style="color:#ABB2BF;">(pagetable, va, va);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">panic</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;lazyalloc&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>这会报错 <code>incomplete type proc</code>，实验文档中解释道要在 <code>vm.c</code> 中 <code>#include &quot;spinlock.h&quot;</code> 然后 <code>#include &quot;proc.h&quot;</code>。</p><p>还需要修改一些 unmap 的函数，防止它们遇到未分配的页时 panic。</p><p>首先是 <code>uvmunmap</code>，在没有找到 entry 或是 entry 的 valid bit 无效时都直接跳过。然后是 <code>uvmcopy</code>，这在 <code>fork</code> 时会用到，父进程的 entry 可能也还未分配。</p><p>需要正确处理 <code>sbrk</code> 的负数参数：直接调用 <code>uvmdealloc</code>：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">uint64 </span><span style="color:#61AFEF;">sys_sbrk</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> addr;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> n;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">argint</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">n) </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">struct</span><span style="color:#ABB2BF;"> proc </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">myproc</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  addr </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">sz</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (n </span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">sz</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">+=</span><span style="color:#ABB2BF;"> n;</span><span style="color:#7F848E;font-style:italic;"> // lazy allocation</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">sz</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">uvmdealloc</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">pagetable</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">sz</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">sz</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">+</span><span style="color:#ABB2BF;"> n);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> addr;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>最后还要处理 syscall 地址有效但还未分配，我一开始是处理了 <code>sysfile.c</code> 里三个相关 syscall 函数，<code>read</code>、<code>write</code> 和 <code>pipe</code>：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">uint64 </span><span style="color:#61AFEF;">sys_read</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">argfd</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">f) </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">argint</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">n) </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">argaddr</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">p) </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">struct</span><span style="color:#ABB2BF;"> proc </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">process </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">myproc</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (p </span><span style="color:#C678DD;">+</span><span style="color:#ABB2BF;"> n </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">sz</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">uvmalloc</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">pagetable</span><span style="color:#ABB2BF;">, p, p </span><span style="color:#C678DD;">+</span><span style="color:#ABB2BF;"> n);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fileread</span><span style="color:#ABB2BF;">(f, p, n);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">uint64 </span><span style="color:#61AFEF;">sys_pipe</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">((fd0 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fdalloc</span><span style="color:#ABB2BF;">(rf)) </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> (fd1 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fdalloc</span><span style="color:#ABB2BF;">(wf)) </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(fd0 </span><span style="color:#C678DD;">&gt;=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">ofile</span><span style="color:#ABB2BF;">[fd0] </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">fileclose</span><span style="color:#ABB2BF;">(rf);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">fileclose</span><span style="color:#ABB2BF;">(wf);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">uvmalloc</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">pagetable</span><span style="color:#ABB2BF;">, fdarray, fdarray </span><span style="color:#C678DD;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">sizeof</span><span style="color:#ABB2BF;">(fd0) </span><span style="color:#C678DD;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">sizeof</span><span style="color:#ABB2BF;">(fd1));</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>修改 <code>uvmalloc</code>：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">uint64 </span><span style="color:#61AFEF;">uvmalloc</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">pagetable_t</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">pagetable</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> uint64 </span><span style="color:#E06C75;font-style:italic;">oldsz</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> uint64 </span><span style="color:#E06C75;font-style:italic;">newsz</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;">(a </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> oldsz; a </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> newsz; a </span><span style="color:#C678DD;">+=</span><span style="color:#ABB2BF;"> PGSIZE){</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">walkaddr</span><span style="color:#ABB2BF;">(pagetable, a) </span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">continue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> newsz;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>参考大佬博客后发现根源都在 <code>copyin</code> 和 <code>copyout</code>，只做这两个函数的修改即可：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">copyout</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">pagetable_t</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">pagetable</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> uint64 </span><span style="color:#E06C75;font-style:italic;">dstva</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">char</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">src</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> uint64 </span><span style="color:#E06C75;font-style:italic;">len</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  uint64 n, va0, pa0;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;">(len </span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">    va0 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">PGROUNDDOWN</span><span style="color:#ABB2BF;">(dstva);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 防止 syscall 的 user page 还没分配</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">pte_t</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">pte;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (va0 </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">myproc</span><span style="color:#ABB2BF;">()-&gt;</span><span style="color:#E06C75;">sz</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">        ((pte </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">walk</span><span style="color:#ABB2BF;">(pagetable, va0, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)) </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span></span>
<span class="line"><span style="color:#ABB2BF;">        (</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">pte </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> PTE_V) </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">lazyalloc</span><span style="color:#ABB2BF;">(pagetable, va0);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Copy from user to kernel.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Copy len bytes to dst from virtual address srcva in a given page table.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Return 0 on success, -1 on error.</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">copyin</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">pagetable_t</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">pagetable</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">char</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;">dst</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> uint64 </span><span style="color:#E06C75;font-style:italic;">srcva</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> uint64 </span><span style="color:#E06C75;font-style:italic;">len</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  uint64 n, va0, pa0;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;">(len </span><span style="color:#C678DD;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">    va0 </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">PGROUNDDOWN</span><span style="color:#ABB2BF;">(srcva);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#56B6C2;">pte_t</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">pte;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (va0 </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">myproc</span><span style="color:#ABB2BF;">()-&gt;</span><span style="color:#E06C75;">sz</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">        ((pte </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">walk</span><span style="color:#ABB2BF;">(pagetable, va0, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)) </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span></span>
<span class="line"><span style="color:#ABB2BF;">        (</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;">pte </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;"> PTE_V) </span><span style="color:#C678DD;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">lazyalloc</span><span style="color:#ABB2BF;">(pagetable, va0);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div>`,128),e=[o];function c(r,t,B,y,i,F){return n(),a("div",null,e)}const D=s(p,[["render",c]]);export{b as __pageData,D as default};
